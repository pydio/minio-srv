// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jobs.proto

/*
Package jobs is a generated protocol buffer package.

It is generated from these files:
	jobs.proto

It has these top-level messages:
	NodesSelector
	UsersSelector
	SourceFilter
	Schedule
	Action
	Job
	JobChangeEvent
	TaskChangeEvent
	PutJobRequest
	PutJobResponse
	GetJobRequest
	GetJobResponse
	DeleteJobRequest
	DeleteJobResponse
	ListJobsRequest
	ListJobsResponse
	ListTasksRequest
	ListTasksResponse
	PutTaskRequest
	PutTaskResponse
	Task
	ActionLog
	JobTriggerEvent
	ActionOutput
	ActionMessage
*/
package jobs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import service "github.com/pydio/services/common/service/proto"
import tree "github.com/pydio/services/common/proto/tree"
import idm "github.com/pydio/services/common/proto/idm"
import activity "github.com/pydio/services/common/proto/activity"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// /////////////////
// TASK SERVICE  //
// /////////////////
type TaskStatus int32

const (
	TaskStatus_Unknown  TaskStatus = 0
	TaskStatus_Idle     TaskStatus = 1
	TaskStatus_Running  TaskStatus = 2
	TaskStatus_Finished TaskStatus = 3
	TaskStatus_Any      TaskStatus = 4
	TaskStatus_Error    TaskStatus = 5
)

var TaskStatus_name = map[int32]string{
	0: "Unknown",
	1: "Idle",
	2: "Running",
	3: "Finished",
	4: "Any",
	5: "Error",
}
var TaskStatus_value = map[string]int32{
	"Unknown":  0,
	"Idle":     1,
	"Running":  2,
	"Finished": 3,
	"Any":      4,
	"Error":    5,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// /////////////////
// JOB  SERVICE  //
// /////////////////
type NodesSelector struct {
	// Select all files - ignore any other condition
	All bool `protobuf:"varint,1,opt,name=All" json:"All,omitempty"`
	// Preset list of node pathes
	Pathes []string `protobuf:"bytes,2,rep,name=Pathes" json:"Pathes,omitempty"`
	// Preset set of nodes
	Nodes []*tree.Node `protobuf:"bytes,3,rep,name=Nodes" json:"Nodes,omitempty"`
	// Query to apply to select users (or filter a given node passed by event)
	Query *service.Query `protobuf:"bytes,4,opt,name=Query" json:"Query,omitempty"`
	// Wether to trigger one action per node or one action
	// with all nodes as selection
	Collect bool `protobuf:"varint,5,opt,name=Collect" json:"Collect,omitempty"`
}

func (m *NodesSelector) Reset()                    { *m = NodesSelector{} }
func (m *NodesSelector) String() string            { return proto.CompactTextString(m) }
func (*NodesSelector) ProtoMessage()               {}
func (*NodesSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodesSelector) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *NodesSelector) GetPathes() []string {
	if m != nil {
		return m.Pathes
	}
	return nil
}

func (m *NodesSelector) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *NodesSelector) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *NodesSelector) GetCollect() bool {
	if m != nil {
		return m.Collect
	}
	return false
}

type UsersSelector struct {
	// Select all users
	All bool `protobuf:"varint,1,opt,name=All" json:"All,omitempty"`
	// Preset set of Users
	Users []*idm.User `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	// Filter users using this query
	Query *service.Query `protobuf:"bytes,3,opt,name=Query" json:"Query,omitempty"`
	// Wether to trigger one action per user or one action
	// with all user as a selection
	Collect bool `protobuf:"varint,5,opt,name=Collect" json:"Collect,omitempty"`
}

func (m *UsersSelector) Reset()                    { *m = UsersSelector{} }
func (m *UsersSelector) String() string            { return proto.CompactTextString(m) }
func (*UsersSelector) ProtoMessage()               {}
func (*UsersSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UsersSelector) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *UsersSelector) GetUsers() []*idm.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UsersSelector) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *UsersSelector) GetCollect() bool {
	if m != nil {
		return m.Collect
	}
	return false
}

type SourceFilter struct {
	// Can be built with SourceSingleQuery or ActionOutputQuery
	Query *service.Query `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
}

func (m *SourceFilter) Reset()                    { *m = SourceFilter{} }
func (m *SourceFilter) String() string            { return proto.CompactTextString(m) }
func (*SourceFilter) ProtoMessage()               {}
func (*SourceFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SourceFilter) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type Schedule struct {
	// ISO 8601 Description of the scheduling
	Iso8601Schedule string `protobuf:"bytes,1,opt,name=Iso8601Schedule" json:"Iso8601Schedule,omitempty"`
	// Minimum time between two runs
	Iso8601MinDelta string `protobuf:"bytes,3,opt,name=Iso8601MinDelta" json:"Iso8601MinDelta,omitempty"`
}

func (m *Schedule) Reset()                    { *m = Schedule{} }
func (m *Schedule) String() string            { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()               {}
func (*Schedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Schedule) GetIso8601Schedule() string {
	if m != nil {
		return m.Iso8601Schedule
	}
	return ""
}

func (m *Schedule) GetIso8601MinDelta() string {
	if m != nil {
		return m.Iso8601MinDelta
	}
	return ""
}

type Action struct {
	// String Identifier for specific action
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// Nodes Selector
	NodesSelector *NodesSelector `protobuf:"bytes,2,opt,name=NodesSelector" json:"NodesSelector,omitempty"`
	// Users Selector
	UsersSelector *UsersSelector `protobuf:"bytes,3,opt,name=UsersSelector" json:"UsersSelector,omitempty"`
	// Node Filter
	NodesFilter *NodesSelector `protobuf:"bytes,4,opt,name=NodesFilter" json:"NodesFilter,omitempty"`
	// User Filter
	UsersFilter *UsersSelector `protobuf:"bytes,5,opt,name=UsersFilter" json:"UsersFilter,omitempty"`
	// Source filter
	SourceFilter *SourceFilter `protobuf:"bytes,6,opt,name=SourceFilter" json:"SourceFilter,omitempty"`
	// Defined parameters for this action
	Parameters map[string]string `protobuf:"bytes,7,rep,name=Parameters" json:"Parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Other actions to perform after this one is finished,
	// using the Output of this action as Input for the next.
	// If there are many, it is considered they can be triggered
	// in parallel
	ChainedActions []*Action `protobuf:"bytes,8,rep,name=ChainedActions" json:"ChainedActions,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Action) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Action) GetNodesSelector() *NodesSelector {
	if m != nil {
		return m.NodesSelector
	}
	return nil
}

func (m *Action) GetUsersSelector() *UsersSelector {
	if m != nil {
		return m.UsersSelector
	}
	return nil
}

func (m *Action) GetNodesFilter() *NodesSelector {
	if m != nil {
		return m.NodesFilter
	}
	return nil
}

func (m *Action) GetUsersFilter() *UsersSelector {
	if m != nil {
		return m.UsersFilter
	}
	return nil
}

func (m *Action) GetSourceFilter() *SourceFilter {
	if m != nil {
		return m.SourceFilter
	}
	return nil
}

func (m *Action) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Action) GetChainedActions() []*Action {
	if m != nil {
		return m.ChainedActions
	}
	return nil
}

type Job struct {
	// Unique ID for this Job
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	// Human-readable Label
	Label string `protobuf:"bytes,2,opt,name=Label" json:"Label,omitempty"`
	// Who created this Job
	Owner string `protobuf:"bytes,3,opt,name=Owner" json:"Owner,omitempty"`
	// Admin can temporarily disable this job
	Inactive bool `protobuf:"varint,4,opt,name=Inactive" json:"Inactive,omitempty"`
	// How the job will be triggered.
	// One of these must be set (not exclusive)
	// Listen to a given set of events
	EventNames []string `protobuf:"bytes,5,rep,name=EventNames" json:"EventNames,omitempty"`
	// Schedule a periodic repetition
	Schedule *Schedule `protobuf:"bytes,6,opt,name=Schedule" json:"Schedule,omitempty"`
	// Start task as soon as job is inserted
	AutoStart bool `protobuf:"varint,12,opt,name=AutoStart" json:"AutoStart,omitempty"`
	// Chain of actions to perform
	Actions []*Action `protobuf:"bytes,7,rep,name=Actions" json:"Actions,omitempty"`
	// Task properties
	MaxConcurrency int32 `protobuf:"varint,8,opt,name=MaxConcurrency" json:"MaxConcurrency,omitempty"`
	Stoppable      bool  `protobuf:"varint,9,opt,name=Stoppable" json:"Stoppable,omitempty"`
	HasProgress    bool  `protobuf:"varint,10,opt,name=HasProgress" json:"HasProgress,omitempty"`
	// Filled with currently running tasks
	Tasks []*Task `protobuf:"bytes,11,rep,name=Tasks" json:"Tasks,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Job) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Job) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Job) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Job) GetInactive() bool {
	if m != nil {
		return m.Inactive
	}
	return false
}

func (m *Job) GetEventNames() []string {
	if m != nil {
		return m.EventNames
	}
	return nil
}

func (m *Job) GetSchedule() *Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *Job) GetAutoStart() bool {
	if m != nil {
		return m.AutoStart
	}
	return false
}

func (m *Job) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *Job) GetMaxConcurrency() int32 {
	if m != nil {
		return m.MaxConcurrency
	}
	return 0
}

func (m *Job) GetStoppable() bool {
	if m != nil {
		return m.Stoppable
	}
	return false
}

func (m *Job) GetHasProgress() bool {
	if m != nil {
		return m.HasProgress
	}
	return false
}

func (m *Job) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// Events sent by the JobService when CRUD'ing a Job configuration
type JobChangeEvent struct {
	JobUpdated *Job   `protobuf:"bytes,1,opt,name=JobUpdated" json:"JobUpdated,omitempty"`
	JobRemoved string `protobuf:"bytes,2,opt,name=JobRemoved" json:"JobRemoved,omitempty"`
}

func (m *JobChangeEvent) Reset()                    { *m = JobChangeEvent{} }
func (m *JobChangeEvent) String() string            { return proto.CompactTextString(m) }
func (*JobChangeEvent) ProtoMessage()               {}
func (*JobChangeEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *JobChangeEvent) GetJobUpdated() *Job {
	if m != nil {
		return m.JobUpdated
	}
	return nil
}

func (m *JobChangeEvent) GetJobRemoved() string {
	if m != nil {
		return m.JobRemoved
	}
	return ""
}

type TaskChangeEvent struct {
	TaskUpdated *Task `protobuf:"bytes,1,opt,name=TaskUpdated" json:"TaskUpdated,omitempty"`
}

func (m *TaskChangeEvent) Reset()                    { *m = TaskChangeEvent{} }
func (m *TaskChangeEvent) String() string            { return proto.CompactTextString(m) }
func (*TaskChangeEvent) ProtoMessage()               {}
func (*TaskChangeEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TaskChangeEvent) GetTaskUpdated() *Task {
	if m != nil {
		return m.TaskUpdated
	}
	return nil
}

type PutJobRequest struct {
	Job *Job `protobuf:"bytes,1,opt,name=Job" json:"Job,omitempty"`
}

func (m *PutJobRequest) Reset()                    { *m = PutJobRequest{} }
func (m *PutJobRequest) String() string            { return proto.CompactTextString(m) }
func (*PutJobRequest) ProtoMessage()               {}
func (*PutJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PutJobRequest) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type PutJobResponse struct {
	Job *Job `protobuf:"bytes,1,opt,name=Job" json:"Job,omitempty"`
}

func (m *PutJobResponse) Reset()                    { *m = PutJobResponse{} }
func (m *PutJobResponse) String() string            { return proto.CompactTextString(m) }
func (*PutJobResponse) ProtoMessage()               {}
func (*PutJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PutJobResponse) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type GetJobRequest struct {
	JobID     string     `protobuf:"bytes,1,opt,name=JobID" json:"JobID,omitempty"`
	LoadTasks TaskStatus `protobuf:"varint,2,opt,name=LoadTasks,enum=jobs.TaskStatus" json:"LoadTasks,omitempty"`
}

func (m *GetJobRequest) Reset()                    { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string            { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()               {}
func (*GetJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetJobRequest) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *GetJobRequest) GetLoadTasks() TaskStatus {
	if m != nil {
		return m.LoadTasks
	}
	return TaskStatus_Unknown
}

type GetJobResponse struct {
	Job *Job `protobuf:"bytes,1,opt,name=Job" json:"Job,omitempty"`
}

func (m *GetJobResponse) Reset()                    { *m = GetJobResponse{} }
func (m *GetJobResponse) String() string            { return proto.CompactTextString(m) }
func (*GetJobResponse) ProtoMessage()               {}
func (*GetJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetJobResponse) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type DeleteJobRequest struct {
	JobID string `protobuf:"bytes,1,opt,name=JobID" json:"JobID,omitempty"`
}

func (m *DeleteJobRequest) Reset()                    { *m = DeleteJobRequest{} }
func (m *DeleteJobRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobRequest) ProtoMessage()               {}
func (*DeleteJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteJobRequest) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

type DeleteJobResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *DeleteJobResponse) Reset()                    { *m = DeleteJobResponse{} }
func (m *DeleteJobResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobResponse) ProtoMessage()               {}
func (*DeleteJobResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteJobResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ListJobsRequest struct {
	Owner      string     `protobuf:"bytes,1,opt,name=Owner" json:"Owner,omitempty"`
	EventsOnly bool       `protobuf:"varint,2,opt,name=EventsOnly" json:"EventsOnly,omitempty"`
	TimersOnly bool       `protobuf:"varint,3,opt,name=TimersOnly" json:"TimersOnly,omitempty"`
	LoadTasks  TaskStatus `protobuf:"varint,4,opt,name=LoadTasks,enum=jobs.TaskStatus" json:"LoadTasks,omitempty"`
}

func (m *ListJobsRequest) Reset()                    { *m = ListJobsRequest{} }
func (m *ListJobsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListJobsRequest) ProtoMessage()               {}
func (*ListJobsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListJobsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ListJobsRequest) GetEventsOnly() bool {
	if m != nil {
		return m.EventsOnly
	}
	return false
}

func (m *ListJobsRequest) GetTimersOnly() bool {
	if m != nil {
		return m.TimersOnly
	}
	return false
}

func (m *ListJobsRequest) GetLoadTasks() TaskStatus {
	if m != nil {
		return m.LoadTasks
	}
	return TaskStatus_Unknown
}

type ListJobsResponse struct {
	Job *Job `protobuf:"bytes,1,opt,name=Job" json:"Job,omitempty"`
}

func (m *ListJobsResponse) Reset()                    { *m = ListJobsResponse{} }
func (m *ListJobsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListJobsResponse) ProtoMessage()               {}
func (*ListJobsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListJobsResponse) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type ListTasksRequest struct {
	JobID  string     `protobuf:"bytes,1,opt,name=JobID" json:"JobID,omitempty"`
	Status TaskStatus `protobuf:"varint,2,opt,name=Status,enum=jobs.TaskStatus" json:"Status,omitempty"`
}

func (m *ListTasksRequest) Reset()                    { *m = ListTasksRequest{} }
func (m *ListTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTasksRequest) ProtoMessage()               {}
func (*ListTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ListTasksRequest) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *ListTasksRequest) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_Unknown
}

type ListTasksResponse struct {
	Task *Task `protobuf:"bytes,1,opt,name=Task" json:"Task,omitempty"`
}

func (m *ListTasksResponse) Reset()                    { *m = ListTasksResponse{} }
func (m *ListTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTasksResponse) ProtoMessage()               {}
func (*ListTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ListTasksResponse) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type PutTaskRequest struct {
	Task *Task `protobuf:"bytes,1,opt,name=Task" json:"Task,omitempty"`
}

func (m *PutTaskRequest) Reset()                    { *m = PutTaskRequest{} }
func (m *PutTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*PutTaskRequest) ProtoMessage()               {}
func (*PutTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PutTaskRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type PutTaskResponse struct {
	Task *Task `protobuf:"bytes,1,opt,name=Task" json:"Task,omitempty"`
}

func (m *PutTaskResponse) Reset()                    { *m = PutTaskResponse{} }
func (m *PutTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*PutTaskResponse) ProtoMessage()               {}
func (*PutTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PutTaskResponse) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type Task struct {
	ID          string       `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	JobID       string       `protobuf:"bytes,2,opt,name=JobID" json:"JobID,omitempty"`
	Status      TaskStatus   `protobuf:"varint,3,opt,name=Status,enum=jobs.TaskStatus" json:"Status,omitempty"`
	StartTime   int32        `protobuf:"varint,4,opt,name=StartTime" json:"StartTime,omitempty"`
	EndTime     int32        `protobuf:"varint,6,opt,name=EndTime" json:"EndTime,omitempty"`
	Progress    float32      `protobuf:"fixed32,7,opt,name=Progress" json:"Progress,omitempty"`
	ActionsLogs []*ActionLog `protobuf:"bytes,8,rep,name=ActionsLogs" json:"ActionsLogs,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Task) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Task) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *Task) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_Unknown
}

func (m *Task) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Task) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Task) GetProgress() float32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *Task) GetActionsLogs() []*ActionLog {
	if m != nil {
		return m.ActionsLogs
	}
	return nil
}

type ActionLog struct {
	Action        *Action        `protobuf:"bytes,1,opt,name=Action" json:"Action,omitempty"`
	InputMessage  *ActionMessage `protobuf:"bytes,2,opt,name=InputMessage" json:"InputMessage,omitempty"`
	OutputMessage *ActionMessage `protobuf:"bytes,3,opt,name=OutputMessage" json:"OutputMessage,omitempty"`
}

func (m *ActionLog) Reset()                    { *m = ActionLog{} }
func (m *ActionLog) String() string            { return proto.CompactTextString(m) }
func (*ActionLog) ProtoMessage()               {}
func (*ActionLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ActionLog) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionLog) GetInputMessage() *ActionMessage {
	if m != nil {
		return m.InputMessage
	}
	return nil
}

func (m *ActionLog) GetOutputMessage() *ActionMessage {
	if m != nil {
		return m.OutputMessage
	}
	return nil
}

// Simple Event sent by the Timer Service
// to trigger a JobID at a given time
type JobTriggerEvent struct {
	JobID    string    `protobuf:"bytes,1,opt,name=JobID" json:"JobID,omitempty"`
	Schedule *Schedule `protobuf:"bytes,2,opt,name=Schedule" json:"Schedule,omitempty"`
	RunNow   bool      `protobuf:"varint,3,opt,name=RunNow" json:"RunNow,omitempty"`
}

func (m *JobTriggerEvent) Reset()                    { *m = JobTriggerEvent{} }
func (m *JobTriggerEvent) String() string            { return proto.CompactTextString(m) }
func (*JobTriggerEvent) ProtoMessage()               {}
func (*JobTriggerEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *JobTriggerEvent) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *JobTriggerEvent) GetSchedule() *Schedule {
	if m != nil {
		return m.Schedule
	}
	return nil
}

func (m *JobTriggerEvent) GetRunNow() bool {
	if m != nil {
		return m.RunNow
	}
	return false
}

// Standard output of an action. Success value is required
// other are optional
type ActionOutput struct {
	Success     bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	RawBody     []byte `protobuf:"bytes,2,opt,name=RawBody,proto3" json:"RawBody,omitempty"`
	StringBody  string `protobuf:"bytes,3,opt,name=StringBody" json:"StringBody,omitempty"`
	JsonBody    []byte `protobuf:"bytes,4,opt,name=JsonBody,proto3" json:"JsonBody,omitempty"`
	ErrorString string `protobuf:"bytes,5,opt,name=ErrorString" json:"ErrorString,omitempty"`
	Ignored     bool   `protobuf:"varint,6,opt,name=Ignored" json:"Ignored,omitempty"`
}

func (m *ActionOutput) Reset()                    { *m = ActionOutput{} }
func (m *ActionOutput) String() string            { return proto.CompactTextString(m) }
func (*ActionOutput) ProtoMessage()               {}
func (*ActionOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ActionOutput) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ActionOutput) GetRawBody() []byte {
	if m != nil {
		return m.RawBody
	}
	return nil
}

func (m *ActionOutput) GetStringBody() string {
	if m != nil {
		return m.StringBody
	}
	return ""
}

func (m *ActionOutput) GetJsonBody() []byte {
	if m != nil {
		return m.JsonBody
	}
	return nil
}

func (m *ActionOutput) GetErrorString() string {
	if m != nil {
		return m.ErrorString
	}
	return ""
}

func (m *ActionOutput) GetIgnored() bool {
	if m != nil {
		return m.Ignored
	}
	return false
}

// Message passed along from one action to another, main properties
// are modified by the various actions.
// OutputChain is being stacked up when passing through actions
type ActionMessage struct {
	Event       *google_protobuf.Any `protobuf:"bytes,1,opt,name=Event" json:"Event,omitempty"`
	Nodes       []*tree.Node         `protobuf:"bytes,2,rep,name=Nodes" json:"Nodes,omitempty"`
	Users       []*idm.User          `protobuf:"bytes,3,rep,name=Users" json:"Users,omitempty"`
	Activities  []*activity.Object   `protobuf:"bytes,4,rep,name=Activities" json:"Activities,omitempty"`
	OutputChain []*ActionOutput      `protobuf:"bytes,5,rep,name=OutputChain" json:"OutputChain,omitempty"`
}

func (m *ActionMessage) Reset()                    { *m = ActionMessage{} }
func (m *ActionMessage) String() string            { return proto.CompactTextString(m) }
func (*ActionMessage) ProtoMessage()               {}
func (*ActionMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ActionMessage) GetEvent() *google_protobuf.Any {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ActionMessage) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ActionMessage) GetUsers() []*idm.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ActionMessage) GetActivities() []*activity.Object {
	if m != nil {
		return m.Activities
	}
	return nil
}

func (m *ActionMessage) GetOutputChain() []*ActionOutput {
	if m != nil {
		return m.OutputChain
	}
	return nil
}

func init() {
	proto.RegisterType((*NodesSelector)(nil), "jobs.NodesSelector")
	proto.RegisterType((*UsersSelector)(nil), "jobs.UsersSelector")
	proto.RegisterType((*SourceFilter)(nil), "jobs.SourceFilter")
	proto.RegisterType((*Schedule)(nil), "jobs.Schedule")
	proto.RegisterType((*Action)(nil), "jobs.Action")
	proto.RegisterType((*Job)(nil), "jobs.Job")
	proto.RegisterType((*JobChangeEvent)(nil), "jobs.JobChangeEvent")
	proto.RegisterType((*TaskChangeEvent)(nil), "jobs.TaskChangeEvent")
	proto.RegisterType((*PutJobRequest)(nil), "jobs.PutJobRequest")
	proto.RegisterType((*PutJobResponse)(nil), "jobs.PutJobResponse")
	proto.RegisterType((*GetJobRequest)(nil), "jobs.GetJobRequest")
	proto.RegisterType((*GetJobResponse)(nil), "jobs.GetJobResponse")
	proto.RegisterType((*DeleteJobRequest)(nil), "jobs.DeleteJobRequest")
	proto.RegisterType((*DeleteJobResponse)(nil), "jobs.DeleteJobResponse")
	proto.RegisterType((*ListJobsRequest)(nil), "jobs.ListJobsRequest")
	proto.RegisterType((*ListJobsResponse)(nil), "jobs.ListJobsResponse")
	proto.RegisterType((*ListTasksRequest)(nil), "jobs.ListTasksRequest")
	proto.RegisterType((*ListTasksResponse)(nil), "jobs.ListTasksResponse")
	proto.RegisterType((*PutTaskRequest)(nil), "jobs.PutTaskRequest")
	proto.RegisterType((*PutTaskResponse)(nil), "jobs.PutTaskResponse")
	proto.RegisterType((*Task)(nil), "jobs.Task")
	proto.RegisterType((*ActionLog)(nil), "jobs.ActionLog")
	proto.RegisterType((*JobTriggerEvent)(nil), "jobs.JobTriggerEvent")
	proto.RegisterType((*ActionOutput)(nil), "jobs.ActionOutput")
	proto.RegisterType((*ActionMessage)(nil), "jobs.ActionMessage")
	proto.RegisterEnum("jobs.TaskStatus", TaskStatus_name, TaskStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for JobService service

type JobServiceClient interface {
	PutJob(ctx context.Context, in *PutJobRequest, opts ...client.CallOption) (*PutJobResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...client.CallOption) (*GetJobResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...client.CallOption) (*DeleteJobResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...client.CallOption) (JobService_ListJobsClient, error)
	PutTask(ctx context.Context, in *PutTaskRequest, opts ...client.CallOption) (*PutTaskResponse, error)
	PutTaskStream(ctx context.Context, opts ...client.CallOption) (JobService_PutTaskStreamClient, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...client.CallOption) (JobService_ListTasksClient, error)
}

type jobServiceClient struct {
	c           client.Client
	serviceName string
}

func NewJobServiceClient(serviceName string, c client.Client) JobServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "jobs"
	}
	return &jobServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *jobServiceClient) PutJob(ctx context.Context, in *PutJobRequest, opts ...client.CallOption) (*PutJobResponse, error) {
	req := c.c.NewRequest(c.serviceName, "JobService.PutJob", in)
	out := new(PutJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...client.CallOption) (*GetJobResponse, error) {
	req := c.c.NewRequest(c.serviceName, "JobService.GetJob", in)
	out := new(GetJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...client.CallOption) (*DeleteJobResponse, error) {
	req := c.c.NewRequest(c.serviceName, "JobService.DeleteJob", in)
	out := new(DeleteJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...client.CallOption) (JobService_ListJobsClient, error) {
	req := c.c.NewRequest(c.serviceName, "JobService.ListJobs", &ListJobsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &jobServiceListJobsClient{stream}, nil
}

type JobService_ListJobsClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListJobsResponse, error)
}

type jobServiceListJobsClient struct {
	stream client.Streamer
}

func (x *jobServiceListJobsClient) Close() error {
	return x.stream.Close()
}

func (x *jobServiceListJobsClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServiceListJobsClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServiceListJobsClient) Recv() (*ListJobsResponse, error) {
	m := new(ListJobsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) PutTask(ctx context.Context, in *PutTaskRequest, opts ...client.CallOption) (*PutTaskResponse, error) {
	req := c.c.NewRequest(c.serviceName, "JobService.PutTask", in)
	out := new(PutTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) PutTaskStream(ctx context.Context, opts ...client.CallOption) (JobService_PutTaskStreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "JobService.PutTaskStream", &PutTaskRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &jobServicePutTaskStreamClient{stream}, nil
}

type JobService_PutTaskStreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PutTaskRequest) error
	Recv() (*PutTaskResponse, error)
}

type jobServicePutTaskStreamClient struct {
	stream client.Streamer
}

func (x *jobServicePutTaskStreamClient) Close() error {
	return x.stream.Close()
}

func (x *jobServicePutTaskStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServicePutTaskStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServicePutTaskStreamClient) Send(m *PutTaskRequest) error {
	return x.stream.Send(m)
}

func (x *jobServicePutTaskStreamClient) Recv() (*PutTaskResponse, error) {
	m := new(PutTaskResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...client.CallOption) (JobService_ListTasksClient, error) {
	req := c.c.NewRequest(c.serviceName, "JobService.ListTasks", &ListTasksRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &jobServiceListTasksClient{stream}, nil
}

type JobService_ListTasksClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListTasksResponse, error)
}

type jobServiceListTasksClient struct {
	stream client.Streamer
}

func (x *jobServiceListTasksClient) Close() error {
	return x.stream.Close()
}

func (x *jobServiceListTasksClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServiceListTasksClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServiceListTasksClient) Recv() (*ListTasksResponse, error) {
	m := new(ListTasksResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for JobService service

type JobServiceHandler interface {
	PutJob(context.Context, *PutJobRequest, *PutJobResponse) error
	GetJob(context.Context, *GetJobRequest, *GetJobResponse) error
	DeleteJob(context.Context, *DeleteJobRequest, *DeleteJobResponse) error
	ListJobs(context.Context, *ListJobsRequest, JobService_ListJobsStream) error
	PutTask(context.Context, *PutTaskRequest, *PutTaskResponse) error
	PutTaskStream(context.Context, JobService_PutTaskStreamStream) error
	ListTasks(context.Context, *ListTasksRequest, JobService_ListTasksStream) error
}

func RegisterJobServiceHandler(s server.Server, hdlr JobServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&JobService{hdlr}, opts...))
}

type JobService struct {
	JobServiceHandler
}

func (h *JobService) PutJob(ctx context.Context, in *PutJobRequest, out *PutJobResponse) error {
	return h.JobServiceHandler.PutJob(ctx, in, out)
}

func (h *JobService) GetJob(ctx context.Context, in *GetJobRequest, out *GetJobResponse) error {
	return h.JobServiceHandler.GetJob(ctx, in, out)
}

func (h *JobService) DeleteJob(ctx context.Context, in *DeleteJobRequest, out *DeleteJobResponse) error {
	return h.JobServiceHandler.DeleteJob(ctx, in, out)
}

func (h *JobService) ListJobs(ctx context.Context, stream server.Streamer) error {
	m := new(ListJobsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.JobServiceHandler.ListJobs(ctx, m, &jobServiceListJobsStream{stream})
}

type JobService_ListJobsStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListJobsResponse) error
}

type jobServiceListJobsStream struct {
	stream server.Streamer
}

func (x *jobServiceListJobsStream) Close() error {
	return x.stream.Close()
}

func (x *jobServiceListJobsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServiceListJobsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServiceListJobsStream) Send(m *ListJobsResponse) error {
	return x.stream.Send(m)
}

func (h *JobService) PutTask(ctx context.Context, in *PutTaskRequest, out *PutTaskResponse) error {
	return h.JobServiceHandler.PutTask(ctx, in, out)
}

func (h *JobService) PutTaskStream(ctx context.Context, stream server.Streamer) error {
	return h.JobServiceHandler.PutTaskStream(ctx, &jobServicePutTaskStreamStream{stream})
}

type JobService_PutTaskStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PutTaskResponse) error
	Recv() (*PutTaskRequest, error)
}

type jobServicePutTaskStreamStream struct {
	stream server.Streamer
}

func (x *jobServicePutTaskStreamStream) Close() error {
	return x.stream.Close()
}

func (x *jobServicePutTaskStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServicePutTaskStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServicePutTaskStreamStream) Send(m *PutTaskResponse) error {
	return x.stream.Send(m)
}

func (x *jobServicePutTaskStreamStream) Recv() (*PutTaskRequest, error) {
	m := new(PutTaskRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *JobService) ListTasks(ctx context.Context, stream server.Streamer) error {
	m := new(ListTasksRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.JobServiceHandler.ListTasks(ctx, m, &jobServiceListTasksStream{stream})
}

type JobService_ListTasksStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListTasksResponse) error
}

type jobServiceListTasksStream struct {
	stream server.Streamer
}

func (x *jobServiceListTasksStream) Close() error {
	return x.stream.Close()
}

func (x *jobServiceListTasksStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServiceListTasksStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServiceListTasksStream) Send(m *ListTasksResponse) error {
	return x.stream.Send(m)
}

func init() { proto.RegisterFile("jobs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x0e, 0x25, 0x53, 0x12, 0x47, 0xb6, 0xac, 0xec, 0x71, 0x7c, 0x08, 0x9d, 0x20, 0x47, 0x20,
	0x82, 0x40, 0x27, 0x48, 0x64, 0xc7, 0x71, 0x72, 0x92, 0xb6, 0x69, 0xeb, 0xd8, 0x4e, 0x6b, 0xc3,
	0x89, 0xdd, 0x55, 0x7c, 0x55, 0xa0, 0x00, 0x25, 0x6e, 0x65, 0xc6, 0xd4, 0xae, 0x4b, 0x2e, 0xed,
	0xea, 0xb6, 0x2f, 0xd1, 0x8b, 0x5e, 0xf7, 0x21, 0xda, 0x77, 0xe9, 0x6d, 0xfb, 0x0c, 0xbd, 0x2b,
	0xf6, 0x87, 0xe4, 0x52, 0xfe, 0x6d, 0x2f, 0x6c, 0x70, 0xbf, 0x99, 0x6f, 0x76, 0x76, 0x66, 0x76,
	0x66, 0x05, 0xf0, 0x81, 0x0d, 0x93, 0xfe, 0x49, 0xcc, 0x38, 0x43, 0x73, 0xe2, 0xbb, 0xe3, 0xf8,
	0x74, 0xaa, 0x80, 0xce, 0xc7, 0xe3, 0x90, 0x1f, 0xa5, 0xc3, 0xfe, 0x88, 0x4d, 0x56, 0x4e, 0xa6,
	0x41, 0xc8, 0x56, 0x12, 0x12, 0x9f, 0x86, 0x23, 0x92, 0xac, 0x8c, 0xd8, 0x64, 0xc2, 0x68, 0xb6,
	0x5e, 0x91, 0xfa, 0x1a, 0xd4, 0xe4, 0xe7, 0xd7, 0x92, 0x15, 0x89, 0xc7, 0x84, 0xc8, 0x7f, 0x9a,
	0xb7, 0x7e, 0x43, 0x5e, 0x18, 0x4c, 0xc4, 0x9f, 0x66, 0x6d, 0xdd, 0x90, 0xe5, 0x8f, 0x78, 0x78,
	0x1a, 0xf2, 0x69, 0xfe, 0x91, 0xf0, 0x98, 0xf8, 0xda, 0x8a, 0xf7, 0x93, 0x05, 0x0b, 0xef, 0x58,
	0x40, 0x92, 0x01, 0x89, 0xc8, 0x88, 0xb3, 0x18, 0xb5, 0xa1, 0xba, 0x11, 0x45, 0xae, 0xd5, 0xb5,
	0x7a, 0x0d, 0x2c, 0x3e, 0xd1, 0x32, 0xd4, 0x0e, 0x7c, 0x7e, 0x44, 0x12, 0xb7, 0xd2, 0xad, 0xf6,
	0x1c, 0xac, 0x57, 0xa8, 0x0b, 0xb6, 0xa4, 0xba, 0xd5, 0x6e, 0xb5, 0xd7, 0x5c, 0x83, 0xbe, 0x3c,
	0x93, 0x80, 0xb0, 0x12, 0xa0, 0xfb, 0x60, 0x7f, 0x95, 0x92, 0x78, 0xea, 0xce, 0x75, 0xad, 0x5e,
	0x73, 0xad, 0xd5, 0xd7, 0x2e, 0xf6, 0x25, 0x8a, 0x95, 0x10, 0xb9, 0x50, 0xdf, 0x64, 0x91, 0xd8,
	0xde, 0xb5, 0xe5, 0xae, 0xd9, 0xd2, 0xfb, 0xc1, 0x82, 0x85, 0xc3, 0x84, 0xc4, 0x57, 0x79, 0xf7,
	0x5f, 0xb0, 0xa5, 0x8a, 0x74, 0xae, 0xb9, 0xe6, 0xf4, 0x45, 0x88, 0x04, 0x82, 0x15, 0x5e, 0x38,
	0x51, 0xfd, 0x67, 0x4e, 0xac, 0xc3, 0xfc, 0x80, 0xa5, 0xf1, 0x88, 0xbc, 0x09, 0x23, 0x4e, 0xe2,
	0xc2, 0x9e, 0x75, 0x85, 0x3d, 0xef, 0x1b, 0x68, 0x0c, 0x46, 0x47, 0x24, 0x48, 0x23, 0x82, 0x7a,
	0xb0, 0xb8, 0x93, 0xb0, 0x17, 0xcf, 0x57, 0x9f, 0x64, 0x90, 0xe4, 0x3a, 0x78, 0x16, 0x36, 0x34,
	0xdf, 0x86, 0x74, 0x8b, 0x44, 0xdc, 0x97, 0x5e, 0x17, 0x9a, 0x19, 0xec, 0xfd, 0x51, 0x85, 0xda,
	0xc6, 0x88, 0x87, 0x8c, 0xa2, 0x16, 0x54, 0x76, 0xb6, 0xb4, 0xc5, 0xca, 0xce, 0x16, 0x7a, 0x39,
	0x93, 0x52, 0xb7, 0x22, 0x1d, 0xfd, 0x57, 0x5f, 0x56, 0x7e, 0x49, 0x84, 0x67, 0x92, 0xff, 0x72,
	0x26, 0xde, 0x3a, 0x66, 0x9a, 0x5a, 0x12, 0xe1, 0x99, 0xcc, 0x3c, 0x83, 0xa6, 0xb4, 0xa5, 0xa2,
	0xa4, 0x33, 0x7e, 0xe1, 0x9e, 0xa6, 0x9e, 0xa0, 0x49, 0x3b, 0x9a, 0x66, 0x5f, 0xbe, 0x9f, 0xa9,
	0x87, 0x9e, 0x97, 0x93, 0xe2, 0xd6, 0x24, 0x0f, 0x29, 0x9e, 0x29, 0xc1, 0xe5, 0xe4, 0x7d, 0x02,
	0x70, 0xe0, 0xc7, 0xfe, 0x84, 0x70, 0x51, 0x32, 0x75, 0x59, 0x32, 0x77, 0x15, 0x4b, 0x45, 0xb3,
	0x5f, 0x88, 0xb7, 0x29, 0x8f, 0xa7, 0xd8, 0xd0, 0x47, 0xeb, 0xd0, 0xda, 0x3c, 0xf2, 0x43, 0x4a,
	0x02, 0xa5, 0x9c, 0xb8, 0x0d, 0x69, 0x61, 0xde, 0xb4, 0x80, 0x67, 0x74, 0x3a, 0xaf, 0x60, 0x71,
	0xc6, 0xa8, 0x28, 0xe3, 0x63, 0x32, 0xd5, 0x39, 0x13, 0x9f, 0x68, 0x09, 0xec, 0x53, 0x3f, 0x4a,
	0x89, 0x4c, 0x96, 0x83, 0xd5, 0xe2, 0xa3, 0xca, 0x0b, 0xcb, 0xfb, 0xb3, 0x02, 0xd5, 0x5d, 0x36,
	0x3c, 0x97, 0xe6, 0x25, 0xb0, 0xf7, 0xfc, 0x21, 0x89, 0x32, 0x86, 0x5c, 0x08, 0x74, 0xff, 0x8c,
	0x92, 0x58, 0xd7, 0x8d, 0x5a, 0xa0, 0x0e, 0x34, 0x76, 0xa8, 0x6c, 0x00, 0x44, 0x66, 0xa6, 0x81,
	0xf3, 0x35, 0xba, 0x07, 0xb0, 0x7d, 0x4a, 0x28, 0x7f, 0xe7, 0x4f, 0x48, 0xe2, 0xda, 0xf2, 0x8a,
	0x1b, 0x08, 0x7a, 0x58, 0x54, 0xb2, 0x0e, 0x73, 0x4b, 0x87, 0x59, 0xa3, 0xb8, 0xa8, 0xf4, 0xbb,
	0xe0, 0x6c, 0xa4, 0x9c, 0x0d, 0xb8, 0x1f, 0x73, 0x77, 0x5e, 0x6e, 0x54, 0x00, 0xe8, 0x01, 0xd4,
	0xb3, 0xb8, 0xd5, 0x2f, 0x88, 0x5b, 0x26, 0x44, 0x0f, 0xa0, 0xf5, 0xd6, 0xff, 0x7e, 0x93, 0xd1,
	0x51, 0x1a, 0xc7, 0x84, 0x8e, 0xa6, 0x6e, 0xa3, 0x6b, 0xf5, 0x6c, 0x3c, 0x83, 0x8a, 0xdd, 0x06,
	0x9c, 0x9d, 0x9c, 0xf8, 0xc3, 0x88, 0xb8, 0x8e, 0xda, 0x2d, 0x07, 0x50, 0x17, 0x9a, 0x5f, 0xfa,
	0xc9, 0x41, 0xcc, 0xc6, 0x31, 0x49, 0x12, 0x17, 0xa4, 0xdc, 0x84, 0x44, 0x03, 0x7b, 0xef, 0x27,
	0xc7, 0x89, 0xdb, 0xd4, 0x0d, 0x4c, 0x7a, 0x23, 0x20, 0xac, 0x04, 0xde, 0xd7, 0xd0, 0xda, 0x65,
	0xc3, 0xcd, 0x23, 0x9f, 0x8e, 0x89, 0x0c, 0x09, 0xfa, 0x1f, 0xc0, 0x2e, 0x1b, 0x1e, 0x9e, 0x04,
	0x3e, 0x27, 0x81, 0x6e, 0x01, 0x8e, 0x22, 0xee, 0xb2, 0x21, 0x36, 0x84, 0x22, 0xb0, 0x02, 0x22,
	0x13, 0x76, 0x4a, 0x02, 0x9d, 0x25, 0x03, 0xf1, 0x3e, 0x83, 0x45, 0xb1, 0x8b, 0x69, 0xfd, 0x11,
	0x34, 0x05, 0x54, 0x36, 0x6f, 0xfa, 0x65, 0x8a, 0xbd, 0x47, 0xb0, 0x70, 0x90, 0x72, 0x69, 0xf1,
	0xbb, 0x94, 0x24, 0x1c, 0xfd, 0x47, 0x56, 0xca, 0x79, 0xaf, 0x04, 0xea, 0x3d, 0x86, 0x56, 0xa6,
	0x9d, 0x9c, 0x30, 0x9a, 0x90, 0xab, 0xd5, 0x0f, 0x61, 0xe1, 0x0b, 0x62, 0x1a, 0x5f, 0x02, 0x7b,
	0x97, 0x0d, 0xf3, 0x12, 0x54, 0x0b, 0xd4, 0x07, 0x67, 0x8f, 0xf9, 0x81, 0x8a, 0xa3, 0x38, 0x63,
	0x6b, 0xad, 0x5d, 0xf8, 0x3b, 0xe0, 0x3e, 0x4f, 0x13, 0x5c, 0xa8, 0x08, 0x2f, 0x32, 0xb3, 0x37,
	0xf1, 0xa2, 0x07, 0xed, 0x2d, 0x12, 0x11, 0x4e, 0xae, 0x73, 0xc4, 0x7b, 0x0c, 0xb7, 0x0d, 0x4d,
	0x6d, 0xdb, 0x85, 0xfa, 0x20, 0x1d, 0x8d, 0x44, 0xfe, 0xd5, 0xc8, 0xc8, 0x96, 0xde, 0x8f, 0x16,
	0x2c, 0xee, 0x85, 0x89, 0xf0, 0x24, 0x31, 0x0c, 0xab, 0xbb, 0x63, 0x99, 0x77, 0x27, 0xbb, 0x1f,
	0xc9, 0x3e, 0x8d, 0xa6, 0xf2, 0x88, 0x0d, 0x6c, 0x20, 0x42, 0xfe, 0x3e, 0x9c, 0x90, 0x58, 0xc9,
	0xab, 0x4a, 0x5e, 0x20, 0xe5, 0x08, 0xcd, 0x5d, 0x1f, 0xa1, 0x15, 0x68, 0x17, 0x8e, 0xdd, 0x24,
	0x46, 0x58, 0x11, 0x24, 0xfb, 0xea, 0x64, 0xf5, 0xa0, 0xa6, 0xf6, 0xbb, 0x34, 0x53, 0x5a, 0xee,
	0x3d, 0x85, 0xdb, 0x86, 0x4d, 0xed, 0xc5, 0x3d, 0x98, 0x13, 0xc0, 0x05, 0x65, 0x29, 0x71, 0x6f,
	0x55, 0x56, 0x98, 0x04, 0xb4, 0x1b, 0xd7, 0x31, 0x9e, 0xc0, 0x62, 0xce, 0xb8, 0xe1, 0x26, 0xbf,
	0x59, 0x4a, 0xe1, 0xa2, 0x7e, 0xa8, 0x8e, 0x5c, 0xb9, 0xf8, 0xc8, 0xd5, 0xab, 0x8f, 0xac, 0xba,
	0x89, 0x1f, 0x73, 0x91, 0x3a, 0x99, 0x27, 0x1b, 0x17, 0x80, 0xa8, 0xa4, 0x6d, 0x1a, 0x48, 0x59,
	0x4d, 0xca, 0xb2, 0xa5, 0xe8, 0xad, 0x79, 0x93, 0xa9, 0x77, 0xad, 0x5e, 0x05, 0xe7, 0x6b, 0xf4,
	0x04, 0x9a, 0xba, 0xa9, 0xed, 0xb1, 0x71, 0x36, 0x2d, 0x16, 0xcd, 0xae, 0xb7, 0xc7, 0xc6, 0xd8,
	0xd4, 0xf1, 0x7e, 0xb6, 0xc0, 0xc9, 0x45, 0xe8, 0x7e, 0x36, 0xe5, 0x75, 0x3c, 0xca, 0x1d, 0x33,
	0x7b, 0x01, 0xfc, 0x1f, 0xe6, 0x77, 0xe8, 0x49, 0xca, 0xdf, 0x92, 0x24, 0xf1, 0xc7, 0xa4, 0x3c,
	0xf0, 0x95, 0x8e, 0x16, 0xe1, 0x92, 0xa2, 0x98, 0xf7, 0xfb, 0x29, 0x37, 0x98, 0xd5, 0xcb, 0x99,
	0x65, 0x4d, 0xef, 0x18, 0x16, 0x77, 0xd9, 0xf0, 0x7d, 0x1c, 0x8e, 0xc7, 0x24, 0x56, 0xdd, 0xeb,
	0xe2, 0xa2, 0x33, 0xe7, 0x47, 0xe5, 0x9a, 0xf9, 0xb1, 0x0c, 0x35, 0x9c, 0xd2, 0x77, 0xec, 0x4c,
	0xdf, 0x23, 0xbd, 0xf2, 0x7e, 0xb5, 0x60, 0x5e, 0x79, 0xa3, 0x9c, 0xb8, 0xfc, 0x62, 0x0b, 0x09,
	0xf6, 0xcf, 0x5e, 0xb3, 0x40, 0xdd, 0xd5, 0x79, 0x9c, 0x2d, 0xc5, 0x45, 0x1d, 0xf0, 0x38, 0xa4,
	0x63, 0x29, 0x54, 0xf3, 0xd1, 0x40, 0x44, 0x22, 0x77, 0x13, 0x46, 0xa5, 0x74, 0x4e, 0x52, 0xf3,
	0xb5, 0x18, 0x26, 0xdb, 0x71, 0xcc, 0x62, 0xa5, 0x2e, 0x9f, 0x29, 0x0e, 0x36, 0x21, 0xb1, 0xef,
	0xce, 0x98, 0xb2, 0x98, 0x04, 0xb2, 0x40, 0x1a, 0x38, 0x5b, 0x7a, 0xbf, 0x5b, 0xb0, 0x50, 0x0a,
	0x25, 0x7a, 0x08, 0xb6, 0x8c, 0x98, 0x4e, 0xea, 0x52, 0x7f, 0xcc, 0xd8, 0x38, 0xd2, 0xbf, 0x07,
	0x86, 0xe9, 0xb7, 0xfd, 0x0d, 0x3a, 0xc5, 0x4a, 0xa5, 0x78, 0x65, 0x57, 0x2e, 0x7b, 0x65, 0xe7,
	0x2f, 0xe0, 0xea, 0x25, 0x2f, 0xe0, 0x55, 0x80, 0x0d, 0xf5, 0xf8, 0x0f, 0x89, 0x68, 0x41, 0x42,
	0xab, 0xdd, 0xcf, 0x7e, 0x0f, 0xf4, 0xf7, 0x87, 0x1f, 0xc8, 0x88, 0x63, 0x43, 0x07, 0xad, 0x43,
	0x53, 0x05, 0x5a, 0x3e, 0x65, 0xe4, 0xa3, 0x20, 0x7f, 0x5d, 0x99, 0x79, 0xc0, 0xa6, 0xda, 0x43,
	0x0c, 0x50, 0xdc, 0x2b, 0xd4, 0x84, 0xfa, 0x21, 0x3d, 0xa6, 0xec, 0x8c, 0xb6, 0x6f, 0xa1, 0x06,
	0xcc, 0xed, 0x04, 0x11, 0x69, 0x5b, 0x02, 0xc6, 0x29, 0xa5, 0x21, 0x1d, 0xb7, 0x2b, 0x68, 0x1e,
	0x1a, 0x6f, 0x42, 0x1a, 0x26, 0x47, 0x24, 0x68, 0x57, 0x51, 0x1d, 0xaa, 0x1b, 0x74, 0xda, 0x9e,
	0x43, 0x0e, 0xd8, 0x32, 0xb4, 0x6d, 0x7b, 0xed, 0x97, 0xaa, 0x9c, 0xa2, 0x03, 0xf5, 0xc6, 0x46,
	0xcf, 0xa0, 0xa6, 0x86, 0x18, 0xd2, 0x35, 0x5a, 0x1a, 0x80, 0x9d, 0xa5, 0x32, 0xa8, 0x5a, 0x8a,
	0x77, 0x4b, 0xd0, 0xd4, 0xd4, 0xc9, 0x68, 0xa5, 0xd1, 0x96, 0xd1, 0xca, 0x83, 0xc9, 0xbb, 0x85,
	0x3e, 0x05, 0x27, 0x9f, 0x29, 0x68, 0x59, 0x29, 0xcd, 0x8e, 0xa3, 0xce, 0xbf, 0xcf, 0xe1, 0x39,
	0xff, 0x15, 0x34, 0xb2, 0x56, 0x8e, 0xee, 0x28, 0xb5, 0x99, 0x99, 0xd3, 0x59, 0x9e, 0x85, 0x33,
	0xf2, 0xaa, 0x85, 0x5e, 0x40, 0x5d, 0x77, 0x47, 0x54, 0x1c, 0xcc, 0x68, 0xaf, 0x9d, 0x3b, 0x33,
	0x68, 0xbe, 0xf1, 0x6b, 0xf9, 0x32, 0x50, 0xc9, 0x10, 0xbf, 0xf6, 0xfe, 0x26, 0xbf, 0x67, 0xad,
	0x5a, 0xe8, 0x73, 0x70, 0xf2, 0x11, 0x80, 0x0c, 0x37, 0xcd, 0x39, 0x93, 0x1d, 0xfe, 0xdc, 0xac,
	0x10, 0xfe, 0x0f, 0x6b, 0xb2, 0x9e, 0x9f, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x80, 0x39,
	0xcc, 0x73, 0x0f, 0x00, 0x00,
}
