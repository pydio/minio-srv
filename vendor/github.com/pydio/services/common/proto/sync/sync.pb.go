// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sync.proto

/*
Package sync is a generated protocol buffer package.

It is generated from these files:
	sync.proto

It has these top-level messages:
	ResyncRequest
	ResyncResponse
*/
package sync

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResyncRequest struct {
	Path   string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
	DryRun bool   `protobuf:"varint,2,opt,name=DryRun" json:"DryRun,omitempty"`
}

func (m *ResyncRequest) Reset()                    { *m = ResyncRequest{} }
func (m *ResyncRequest) String() string            { return proto.CompactTextString(m) }
func (*ResyncRequest) ProtoMessage()               {}
func (*ResyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ResyncRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ResyncRequest) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

type ResyncResponse struct {
	Success  bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	JsonDiff string `protobuf:"bytes,2,opt,name=JsonDiff" json:"JsonDiff,omitempty"`
}

func (m *ResyncResponse) Reset()                    { *m = ResyncResponse{} }
func (m *ResyncResponse) String() string            { return proto.CompactTextString(m) }
func (*ResyncResponse) ProtoMessage()               {}
func (*ResyncResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResyncResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ResyncResponse) GetJsonDiff() string {
	if m != nil {
		return m.JsonDiff
	}
	return ""
}

func init() {
	proto.RegisterType((*ResyncRequest)(nil), "sync.ResyncRequest")
	proto.RegisterType((*ResyncResponse)(nil), "sync.ResyncResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SyncEndpoint service

type SyncEndpointClient interface {
	TriggerResync(ctx context.Context, in *ResyncRequest, opts ...client.CallOption) (*ResyncResponse, error)
}

type syncEndpointClient struct {
	c           client.Client
	serviceName string
}

func NewSyncEndpointClient(serviceName string, c client.Client) SyncEndpointClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "sync"
	}
	return &syncEndpointClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *syncEndpointClient) TriggerResync(ctx context.Context, in *ResyncRequest, opts ...client.CallOption) (*ResyncResponse, error) {
	req := c.c.NewRequest(c.serviceName, "SyncEndpoint.TriggerResync", in)
	out := new(ResyncResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SyncEndpoint service

type SyncEndpointHandler interface {
	TriggerResync(context.Context, *ResyncRequest, *ResyncResponse) error
}

func RegisterSyncEndpointHandler(s server.Server, hdlr SyncEndpointHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&SyncEndpoint{hdlr}, opts...))
}

type SyncEndpoint struct {
	SyncEndpointHandler
}

func (h *SyncEndpoint) TriggerResync(ctx context.Context, in *ResyncRequest, out *ResyncResponse) error {
	return h.SyncEndpointHandler.TriggerResync(ctx, in, out)
}

func init() { proto.RegisterFile("sync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xae, 0xcc, 0x4b,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xac, 0xb9, 0x78, 0x83, 0x52,
	0x41, 0xac, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0x80, 0xc4, 0x92,
	0x0c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x8c, 0x8b, 0xcd, 0xa5, 0xa8,
	0x32, 0xa8, 0x34, 0x4f, 0x82, 0x49, 0x81, 0x51, 0x83, 0x23, 0x08, 0xca, 0x53, 0x72, 0xe3, 0xe2,
	0x83, 0x69, 0x2e, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe0, 0x62, 0x0f, 0x2e, 0x4d, 0x4e,
	0x4e, 0x2d, 0x2e, 0x06, 0x1b, 0xc0, 0x11, 0x04, 0xe3, 0x0a, 0x49, 0x71, 0x71, 0x78, 0x15, 0xe7,
	0xe7, 0xb9, 0x64, 0xa6, 0xa5, 0x81, 0x4d, 0xe1, 0x0c, 0x82, 0xf3, 0x8d, 0x7c, 0xb8, 0x78, 0x82,
	0x2b, 0xf3, 0x92, 0x5d, 0xf3, 0x52, 0x0a, 0xf2, 0x33, 0xf3, 0x4a, 0x84, 0x6c, 0xb8, 0x78, 0x43,
	0x8a, 0x32, 0xd3, 0xd3, 0x53, 0x8b, 0x20, 0xc6, 0x0b, 0x09, 0xeb, 0x81, 0x1d, 0x8e, 0xe2, 0x52,
	0x29, 0x11, 0x54, 0x41, 0x88, 0x0b, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0xfe, 0x33, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x0a, 0x67, 0x3c, 0x05, 0xed, 0x00, 0x00, 0x00,
}
