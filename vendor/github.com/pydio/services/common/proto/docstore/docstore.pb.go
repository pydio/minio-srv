// Code generated by protoc-gen-go. DO NOT EDIT.
// source: docstore.proto

/*
Package docstore is a generated protocol buffer package.

It is generated from these files:
	docstore.proto

It has these top-level messages:
	Document
	DocumentQuery
	PutDocumentRequest
	PutDocumentResponse
	GetDocumentRequest
	GetDocumentResponse
	DeleteDocumentsRequest
	DeleteDocumentsResponse
	ListDocumentsRequest
	ListDocumentsResponse
*/
package docstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DocumentType int32

const (
	DocumentType_JSON   DocumentType = 0
	DocumentType_BINARY DocumentType = 1
)

var DocumentType_name = map[int32]string{
	0: "JSON",
	1: "BINARY",
}
var DocumentType_value = map[string]int32{
	"JSON":   0,
	"BINARY": 1,
}

func (x DocumentType) String() string {
	return proto.EnumName(DocumentType_name, int32(x))
}
func (DocumentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Document struct {
	ID            string       `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	Type          DocumentType `protobuf:"varint,3,opt,name=Type,enum=docstore.DocumentType" json:"Type,omitempty"`
	Owner         string       `protobuf:"bytes,4,opt,name=Owner" json:"Owner,omitempty"`
	Data          []byte       `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	IndexableMeta []byte       `protobuf:"bytes,6,opt,name=IndexableMeta,proto3" json:"IndexableMeta,omitempty"`
}

func (m *Document) Reset()                    { *m = Document{} }
func (m *Document) String() string            { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()               {}
func (*Document) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Document) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Document) GetType() DocumentType {
	if m != nil {
		return m.Type
	}
	return DocumentType_JSON
}

func (m *Document) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Document) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Document) GetIndexableMeta() []byte {
	if m != nil {
		return m.IndexableMeta
	}
	return nil
}

type DocumentQuery struct {
	ID        string `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	Owner     string `protobuf:"bytes,3,opt,name=Owner" json:"Owner,omitempty"`
	MetaQuery string `protobuf:"bytes,4,opt,name=MetaQuery" json:"MetaQuery,omitempty"`
}

func (m *DocumentQuery) Reset()                    { *m = DocumentQuery{} }
func (m *DocumentQuery) String() string            { return proto.CompactTextString(m) }
func (*DocumentQuery) ProtoMessage()               {}
func (*DocumentQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DocumentQuery) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DocumentQuery) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DocumentQuery) GetMetaQuery() string {
	if m != nil {
		return m.MetaQuery
	}
	return ""
}

type PutDocumentRequest struct {
	StoreID  string    `protobuf:"bytes,1,opt,name=StoreID" json:"StoreID,omitempty"`
	Document *Document `protobuf:"bytes,2,opt,name=Document" json:"Document,omitempty"`
}

func (m *PutDocumentRequest) Reset()                    { *m = PutDocumentRequest{} }
func (m *PutDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*PutDocumentRequest) ProtoMessage()               {}
func (*PutDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutDocumentRequest) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *PutDocumentRequest) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type PutDocumentResponse struct {
	Document *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
}

func (m *PutDocumentResponse) Reset()                    { *m = PutDocumentResponse{} }
func (m *PutDocumentResponse) String() string            { return proto.CompactTextString(m) }
func (*PutDocumentResponse) ProtoMessage()               {}
func (*PutDocumentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PutDocumentResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

type GetDocumentRequest struct {
	StoreID    string `protobuf:"bytes,1,opt,name=StoreID" json:"StoreID,omitempty"`
	DocumentID string `protobuf:"bytes,2,opt,name=DocumentID" json:"DocumentID,omitempty"`
}

func (m *GetDocumentRequest) Reset()                    { *m = GetDocumentRequest{} }
func (m *GetDocumentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDocumentRequest) ProtoMessage()               {}
func (*GetDocumentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetDocumentRequest) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *GetDocumentRequest) GetDocumentID() string {
	if m != nil {
		return m.DocumentID
	}
	return ""
}

type GetDocumentResponse struct {
	Document  *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
	BinaryUrl string    `protobuf:"bytes,2,opt,name=BinaryUrl" json:"BinaryUrl,omitempty"`
}

func (m *GetDocumentResponse) Reset()                    { *m = GetDocumentResponse{} }
func (m *GetDocumentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDocumentResponse) ProtoMessage()               {}
func (*GetDocumentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetDocumentResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *GetDocumentResponse) GetBinaryUrl() string {
	if m != nil {
		return m.BinaryUrl
	}
	return ""
}

type DeleteDocumentsRequest struct {
	StoreID    string         `protobuf:"bytes,1,opt,name=StoreID" json:"StoreID,omitempty"`
	DocumentID string         `protobuf:"bytes,2,opt,name=DocumentID" json:"DocumentID,omitempty"`
	Query      *DocumentQuery `protobuf:"bytes,3,opt,name=Query" json:"Query,omitempty"`
}

func (m *DeleteDocumentsRequest) Reset()                    { *m = DeleteDocumentsRequest{} }
func (m *DeleteDocumentsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDocumentsRequest) ProtoMessage()               {}
func (*DeleteDocumentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteDocumentsRequest) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *DeleteDocumentsRequest) GetDocumentID() string {
	if m != nil {
		return m.DocumentID
	}
	return ""
}

func (m *DeleteDocumentsRequest) GetQuery() *DocumentQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

type DeleteDocumentsResponse struct {
	Success       bool  `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	DeletionCount int32 `protobuf:"varint,2,opt,name=DeletionCount" json:"DeletionCount,omitempty"`
}

func (m *DeleteDocumentsResponse) Reset()                    { *m = DeleteDocumentsResponse{} }
func (m *DeleteDocumentsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDocumentsResponse) ProtoMessage()               {}
func (*DeleteDocumentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteDocumentsResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DeleteDocumentsResponse) GetDeletionCount() int32 {
	if m != nil {
		return m.DeletionCount
	}
	return 0
}

type ListDocumentsRequest struct {
	StoreID string         `protobuf:"bytes,1,opt,name=StoreID" json:"StoreID,omitempty"`
	Query   *DocumentQuery `protobuf:"bytes,2,opt,name=Query" json:"Query,omitempty"`
}

func (m *ListDocumentsRequest) Reset()                    { *m = ListDocumentsRequest{} }
func (m *ListDocumentsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDocumentsRequest) ProtoMessage()               {}
func (*ListDocumentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListDocumentsRequest) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *ListDocumentsRequest) GetQuery() *DocumentQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

type ListDocumentsResponse struct {
	Document  *Document `protobuf:"bytes,1,opt,name=Document" json:"Document,omitempty"`
	BinaryUrl string    `protobuf:"bytes,2,opt,name=BinaryUrl" json:"BinaryUrl,omitempty"`
	Score     int32     `protobuf:"varint,3,opt,name=Score" json:"Score,omitempty"`
}

func (m *ListDocumentsResponse) Reset()                    { *m = ListDocumentsResponse{} }
func (m *ListDocumentsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDocumentsResponse) ProtoMessage()               {}
func (*ListDocumentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListDocumentsResponse) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *ListDocumentsResponse) GetBinaryUrl() string {
	if m != nil {
		return m.BinaryUrl
	}
	return ""
}

func (m *ListDocumentsResponse) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*Document)(nil), "docstore.Document")
	proto.RegisterType((*DocumentQuery)(nil), "docstore.DocumentQuery")
	proto.RegisterType((*PutDocumentRequest)(nil), "docstore.PutDocumentRequest")
	proto.RegisterType((*PutDocumentResponse)(nil), "docstore.PutDocumentResponse")
	proto.RegisterType((*GetDocumentRequest)(nil), "docstore.GetDocumentRequest")
	proto.RegisterType((*GetDocumentResponse)(nil), "docstore.GetDocumentResponse")
	proto.RegisterType((*DeleteDocumentsRequest)(nil), "docstore.DeleteDocumentsRequest")
	proto.RegisterType((*DeleteDocumentsResponse)(nil), "docstore.DeleteDocumentsResponse")
	proto.RegisterType((*ListDocumentsRequest)(nil), "docstore.ListDocumentsRequest")
	proto.RegisterType((*ListDocumentsResponse)(nil), "docstore.ListDocumentsResponse")
	proto.RegisterEnum("docstore.DocumentType", DocumentType_name, DocumentType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DocStore service

type DocStoreClient interface {
	PutDocument(ctx context.Context, in *PutDocumentRequest, opts ...client.CallOption) (*PutDocumentResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...client.CallOption) (*GetDocumentResponse, error)
	DeleteDocuments(ctx context.Context, in *DeleteDocumentsRequest, opts ...client.CallOption) (*DeleteDocumentsResponse, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...client.CallOption) (DocStore_ListDocumentsClient, error)
}

type docStoreClient struct {
	c           client.Client
	serviceName string
}

func NewDocStoreClient(serviceName string, c client.Client) DocStoreClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "docstore"
	}
	return &docStoreClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *docStoreClient) PutDocument(ctx context.Context, in *PutDocumentRequest, opts ...client.CallOption) (*PutDocumentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.PutDocument", in)
	out := new(PutDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...client.CallOption) (*GetDocumentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.GetDocument", in)
	out := new(GetDocumentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) DeleteDocuments(ctx context.Context, in *DeleteDocumentsRequest, opts ...client.CallOption) (*DeleteDocumentsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.DeleteDocuments", in)
	out := new(DeleteDocumentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...client.CallOption) (DocStore_ListDocumentsClient, error) {
	req := c.c.NewRequest(c.serviceName, "DocStore.ListDocuments", &ListDocumentsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &docStoreListDocumentsClient{stream}, nil
}

type DocStore_ListDocumentsClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListDocumentsResponse, error)
}

type docStoreListDocumentsClient struct {
	stream client.Streamer
}

func (x *docStoreListDocumentsClient) Close() error {
	return x.stream.Close()
}

func (x *docStoreListDocumentsClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *docStoreListDocumentsClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *docStoreListDocumentsClient) Recv() (*ListDocumentsResponse, error) {
	m := new(ListDocumentsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DocStore service

type DocStoreHandler interface {
	PutDocument(context.Context, *PutDocumentRequest, *PutDocumentResponse) error
	GetDocument(context.Context, *GetDocumentRequest, *GetDocumentResponse) error
	DeleteDocuments(context.Context, *DeleteDocumentsRequest, *DeleteDocumentsResponse) error
	ListDocuments(context.Context, *ListDocumentsRequest, DocStore_ListDocumentsStream) error
}

func RegisterDocStoreHandler(s server.Server, hdlr DocStoreHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&DocStore{hdlr}, opts...))
}

type DocStore struct {
	DocStoreHandler
}

func (h *DocStore) PutDocument(ctx context.Context, in *PutDocumentRequest, out *PutDocumentResponse) error {
	return h.DocStoreHandler.PutDocument(ctx, in, out)
}

func (h *DocStore) GetDocument(ctx context.Context, in *GetDocumentRequest, out *GetDocumentResponse) error {
	return h.DocStoreHandler.GetDocument(ctx, in, out)
}

func (h *DocStore) DeleteDocuments(ctx context.Context, in *DeleteDocumentsRequest, out *DeleteDocumentsResponse) error {
	return h.DocStoreHandler.DeleteDocuments(ctx, in, out)
}

func (h *DocStore) ListDocuments(ctx context.Context, stream server.Streamer) error {
	m := new(ListDocumentsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DocStoreHandler.ListDocuments(ctx, m, &docStoreListDocumentsStream{stream})
}

type DocStore_ListDocumentsStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListDocumentsResponse) error
}

type docStoreListDocumentsStream struct {
	stream server.Streamer
}

func (x *docStoreListDocumentsStream) Close() error {
	return x.stream.Close()
}

func (x *docStoreListDocumentsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *docStoreListDocumentsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *docStoreListDocumentsStream) Send(m *ListDocumentsResponse) error {
	return x.stream.Send(m)
}

func init() { proto.RegisterFile("docstore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x3a, 0x71, 0x48, 0xa7, 0x4d, 0xa8, 0xa6, 0xa5, 0xb5, 0xa2, 0x52, 0xc2, 0xaa, 0x87,
	0xa8, 0x12, 0x11, 0x0a, 0x4f, 0x40, 0x31, 0x42, 0x46, 0x25, 0x85, 0x4d, 0x91, 0xe8, 0x05, 0xe4,
	0xba, 0x73, 0x88, 0x14, 0xbc, 0xc1, 0x5e, 0x0b, 0x22, 0x4e, 0xbc, 0x04, 0x8f, 0xc6, 0xf3, 0x20,
	0xaf, 0xb3, 0xfe, 0xa9, 0x53, 0xd4, 0x82, 0xb8, 0x79, 0x7e, 0xbe, 0x6f, 0xbe, 0x99, 0x9d, 0x31,
	0xf4, 0xae, 0x64, 0x10, 0x2b, 0x19, 0xd1, 0x68, 0x11, 0x49, 0x25, 0xb1, 0x63, 0x6c, 0xfe, 0x93,
	0x41, 0xc7, 0x95, 0x41, 0xf2, 0x99, 0x42, 0x85, 0x3d, 0xb0, 0x3c, 0xd7, 0xb1, 0x06, 0x6c, 0xb8,
	0x21, 0x2c, 0xcf, 0xc5, 0x63, 0x68, 0x9d, 0x2f, 0x17, 0xe4, 0x34, 0x07, 0x6c, 0xd8, 0x1b, 0xef,
	0x8d, 0x72, 0x16, 0x83, 0x48, 0xa3, 0x42, 0xe7, 0xe0, 0x2e, 0xd8, 0x67, 0x5f, 0x43, 0x8a, 0x9c,
	0x96, 0x86, 0x67, 0x06, 0x22, 0xb4, 0x5c, 0x5f, 0xf9, 0x8e, 0x3d, 0x60, 0xc3, 0x2d, 0xa1, 0xbf,
	0xf1, 0x08, 0xba, 0x5e, 0x78, 0x45, 0xdf, 0xfc, 0xcb, 0x39, 0xbd, 0x21, 0xe5, 0x3b, 0x6d, 0x1d,
	0xac, 0x3a, 0xf9, 0x14, 0xba, 0xa6, 0xca, 0xbb, 0x84, 0xa2, 0x65, 0x4d, 0x5c, 0x5e, 0xb0, 0x59,
	0x2e, 0x78, 0x00, 0x1b, 0x29, 0x5c, 0x43, 0x56, 0x52, 0x0a, 0x07, 0xff, 0x08, 0xf8, 0x36, 0x51,
	0x86, 0x57, 0xd0, 0x97, 0x84, 0x62, 0x85, 0x0e, 0xdc, 0x9b, 0xa6, 0x6d, 0x79, 0xae, 0xc3, 0x34,
	0xc2, 0x98, 0x38, 0x2a, 0x86, 0xa3, 0x2b, 0x6f, 0x8e, 0xb1, 0x3e, 0x04, 0x91, 0xe7, 0xf0, 0x97,
	0xb0, 0x53, 0xe1, 0x8f, 0x17, 0x32, 0x8c, 0xa9, 0x42, 0xc3, 0x6e, 0x41, 0x33, 0x01, 0x7c, 0x45,
	0x77, 0x90, 0x79, 0x08, 0x60, 0x92, 0xf3, 0x11, 0x95, 0x3c, 0x3c, 0x80, 0x9d, 0x0a, 0xdf, 0xdf,
	0xc9, 0x4a, 0x67, 0x7b, 0x32, 0x0b, 0xfd, 0x68, 0xf9, 0x3e, 0x9a, 0xaf, 0xaa, 0x14, 0x0e, 0xfe,
	0x83, 0xc1, 0x9e, 0x4b, 0x73, 0x52, 0x64, 0x00, 0xf1, 0x3f, 0x2b, 0xc7, 0x27, 0x60, 0x67, 0x4f,
	0xd9, 0xd4, 0xfa, 0xf6, 0xeb, 0xfa, 0x74, 0x58, 0x64, 0x59, 0xfc, 0x02, 0xf6, 0x6b, 0x12, 0x56,
	0xcd, 0xa6, 0x1a, 0x92, 0x20, 0xa0, 0x38, 0xd6, 0x1a, 0x3a, 0xc2, 0x98, 0xe9, 0x3e, 0x6a, 0xd0,
	0x4c, 0x86, 0x2f, 0x64, 0xb2, 0x7a, 0x69, 0x5b, 0x54, 0x9d, 0xfc, 0x13, 0xec, 0x9e, 0xce, 0x62,
	0x75, 0x87, 0xde, 0x72, 0xed, 0xd6, 0xad, 0xb4, 0x7f, 0x87, 0x07, 0xd7, 0x0a, 0xfc, 0x8f, 0x67,
	0x4a, 0xcf, 0x66, 0x1a, 0xc8, 0x28, 0x3b, 0x6a, 0x5b, 0x64, 0xc6, 0xf1, 0x11, 0x6c, 0x95, 0x6f,
	0x1a, 0x3b, 0xd0, 0x7a, 0x3d, 0x3d, 0x9b, 0x6c, 0x37, 0x10, 0xa0, 0x7d, 0xe2, 0x4d, 0x9e, 0x8b,
	0x8b, 0x6d, 0x36, 0xfe, 0x65, 0x69, 0x29, 0xba, 0x41, 0x3c, 0x85, 0xcd, 0xd2, 0xae, 0xe3, 0x41,
	0xa1, 0xa9, 0x7e, 0x62, 0xfd, 0x87, 0x37, 0x44, 0xb3, 0x16, 0x79, 0x23, 0x65, 0x2b, 0xad, 0x68,
	0x99, 0xad, 0x7e, 0x09, 0x65, 0xb6, 0x35, 0x7b, 0xcd, 0x1b, 0xf8, 0x01, 0xee, 0x5f, 0xdb, 0x03,
	0x1c, 0x94, 0x66, 0xb6, 0x76, 0x4b, 0xfb, 0x8f, 0xff, 0x90, 0x91, 0x33, 0x9f, 0x43, 0xb7, 0xf2,
	0x4a, 0x78, 0x58, 0xa0, 0xd6, 0xed, 0x47, 0xff, 0xd1, 0x8d, 0x71, 0xc3, 0xf9, 0x94, 0x5d, 0xb6,
	0xf5, 0x6f, 0xf9, 0xd9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x7a, 0x74, 0x0b, 0xa8, 0x05,
	0x00, 0x00,
}
