// Code generated by protoc-gen-go. DO NOT EDIT.
// source: idm.proto

/*
Package idm is a generated protocol buffer package.

It is generated from these files:
	idm.proto

It has these top-level messages:
	CreateRoleRequest
	CreateRoleResponse
	DeleteRoleRequest
	DeleteRoleResponse
	SearchRoleRequest
	SearchRoleResponse
	Role
	RoleSingleQuery
	CreateUserRequest
	CreateUserResponse
	BindUserRequest
	BindUserResponse
	DeleteUserRequest
	DeleteUserResponse
	SearchUserRequest
	SearchUserResponse
	User
	UserSingleQuery
	CreateWorkspaceRequest
	CreateWorkspaceResponse
	DeleteWorkspaceRequest
	DeleteWorkspaceResponse
	SearchWorkspaceRequest
	SearchWorkspaceResponse
	Workspace
	WorkspaceSingleQuery
*/
package idm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import service "github.com/pydio/services/common/service/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *****************************************************************************
//  Messages structure
// *****************************************************************************
type CreateRoleRequest struct {
	Role *Role `protobuf:"bytes,1,opt,name=Role" json:"Role,omitempty"`
}

func (m *CreateRoleRequest) Reset()                    { *m = CreateRoleRequest{} }
func (m *CreateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleRequest) ProtoMessage()               {}
func (*CreateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRoleRequest) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type CreateRoleResponse struct {
	Role *Role `protobuf:"bytes,1,opt,name=Role" json:"Role,omitempty"`
}

func (m *CreateRoleResponse) Reset()                    { *m = CreateRoleResponse{} }
func (m *CreateRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRoleResponse) ProtoMessage()               {}
func (*CreateRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRoleResponse) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type DeleteRoleRequest struct {
	Query *service.Query `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
}

func (m *DeleteRoleRequest) Reset()                    { *m = DeleteRoleRequest{} }
func (m *DeleteRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoleRequest) ProtoMessage()               {}
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteRoleRequest) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type DeleteRoleResponse struct {
	RowsDeleted int64 `protobuf:"varint,1,opt,name=RowsDeleted" json:"RowsDeleted,omitempty"`
}

func (m *DeleteRoleResponse) Reset()                    { *m = DeleteRoleResponse{} }
func (m *DeleteRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoleResponse) ProtoMessage()               {}
func (*DeleteRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteRoleResponse) GetRowsDeleted() int64 {
	if m != nil {
		return m.RowsDeleted
	}
	return 0
}

type SearchRoleRequest struct {
	Query *service.Query `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
}

func (m *SearchRoleRequest) Reset()                    { *m = SearchRoleRequest{} }
func (m *SearchRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRoleRequest) ProtoMessage()               {}
func (*SearchRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SearchRoleRequest) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type SearchRoleResponse struct {
	Role *Role `protobuf:"bytes,1,opt,name=Role" json:"Role,omitempty"`
}

func (m *SearchRoleResponse) Reset()                    { *m = SearchRoleResponse{} }
func (m *SearchRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchRoleResponse) ProtoMessage()               {}
func (*SearchRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SearchRoleResponse) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type Role struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Role) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RoleSingleQuery struct {
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	Not  bool     `protobuf:"varint,3,opt,name=not" json:"not,omitempty"`
}

func (m *RoleSingleQuery) Reset()                    { *m = RoleSingleQuery{} }
func (m *RoleSingleQuery) String() string            { return proto.CompactTextString(m) }
func (*RoleSingleQuery) ProtoMessage()               {}
func (*RoleSingleQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RoleSingleQuery) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RoleSingleQuery) GetNot() bool {
	if m != nil {
		return m.Not
	}
	return false
}

// *****************************************************************************
//  Messages structure
// *****************************************************************************
type CreateUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type CreateUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type BindUserRequest struct {
	UserName string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *BindUserRequest) Reset()                    { *m = BindUserRequest{} }
func (m *BindUserRequest) String() string            { return proto.CompactTextString(m) }
func (*BindUserRequest) ProtoMessage()               {}
func (*BindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BindUserRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *BindUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type BindUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *BindUserResponse) Reset()                    { *m = BindUserResponse{} }
func (m *BindUserResponse) String() string            { return proto.CompactTextString(m) }
func (*BindUserResponse) ProtoMessage()               {}
func (*BindUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BindUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type DeleteUserRequest struct {
	Query *service.Query `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteUserRequest) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type DeleteUserResponse struct {
	RowsDeleted int64 `protobuf:"varint,1,opt,name=RowsDeleted" json:"RowsDeleted,omitempty"`
}

func (m *DeleteUserResponse) Reset()                    { *m = DeleteUserResponse{} }
func (m *DeleteUserResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserResponse) ProtoMessage()               {}
func (*DeleteUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteUserResponse) GetRowsDeleted() int64 {
	if m != nil {
		return m.RowsDeleted
	}
	return 0
}

type SearchUserRequest struct {
	Query *service.Query `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
}

func (m *SearchUserRequest) Reset()                    { *m = SearchUserRequest{} }
func (m *SearchUserRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchUserRequest) ProtoMessage()               {}
func (*SearchUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SearchUserRequest) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type SearchUserResponse struct {
	User *User `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
}

func (m *SearchUserResponse) Reset()                    { *m = SearchUserResponse{} }
func (m *SearchUserResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchUserResponse) ProtoMessage()               {}
func (*SearchUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SearchUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	ID         string            `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Login      string            `protobuf:"bytes,2,opt,name=Login" json:"Login,omitempty"`
	Password   string            `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	GroupPath  string            `protobuf:"bytes,4,opt,name=GroupPath" json:"GroupPath,omitempty"`
	Attributes map[string]string `protobuf:"bytes,5,rep,name=Attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetGroupPath() string {
	if m != nil {
		return m.GroupPath
	}
	return ""
}

func (m *User) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type UserSingleQuery struct {
	Login      string            `protobuf:"bytes,1,opt,name=login" json:"login,omitempty"`
	Password   string            `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	GroupPath  string            `protobuf:"bytes,3,opt,name=groupPath" json:"groupPath,omitempty"`
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Not        bool              `protobuf:"varint,5,opt,name=not" json:"not,omitempty"`
}

func (m *UserSingleQuery) Reset()                    { *m = UserSingleQuery{} }
func (m *UserSingleQuery) String() string            { return proto.CompactTextString(m) }
func (*UserSingleQuery) ProtoMessage()               {}
func (*UserSingleQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UserSingleQuery) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *UserSingleQuery) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserSingleQuery) GetGroupPath() string {
	if m != nil {
		return m.GroupPath
	}
	return ""
}

func (m *UserSingleQuery) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UserSingleQuery) GetNot() bool {
	if m != nil {
		return m.Not
	}
	return false
}

// *****************************************************************************
//  Messages structure
// *****************************************************************************
type CreateWorkspaceRequest struct {
	Workspace *Workspace `protobuf:"bytes,1,opt,name=Workspace" json:"Workspace,omitempty"`
}

func (m *CreateWorkspaceRequest) Reset()                    { *m = CreateWorkspaceRequest{} }
func (m *CreateWorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateWorkspaceRequest) ProtoMessage()               {}
func (*CreateWorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CreateWorkspaceRequest) GetWorkspace() *Workspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

type CreateWorkspaceResponse struct {
	Workspace *Workspace `protobuf:"bytes,1,opt,name=Workspace" json:"Workspace,omitempty"`
}

func (m *CreateWorkspaceResponse) Reset()                    { *m = CreateWorkspaceResponse{} }
func (m *CreateWorkspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateWorkspaceResponse) ProtoMessage()               {}
func (*CreateWorkspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateWorkspaceResponse) GetWorkspace() *Workspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

type DeleteWorkspaceRequest struct {
	Query *service.Query `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
}

func (m *DeleteWorkspaceRequest) Reset()                    { *m = DeleteWorkspaceRequest{} }
func (m *DeleteWorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteWorkspaceRequest) ProtoMessage()               {}
func (*DeleteWorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DeleteWorkspaceRequest) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type DeleteWorkspaceResponse struct {
	RowsDeleted int64 `protobuf:"varint,1,opt,name=RowsDeleted" json:"RowsDeleted,omitempty"`
}

func (m *DeleteWorkspaceResponse) Reset()                    { *m = DeleteWorkspaceResponse{} }
func (m *DeleteWorkspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteWorkspaceResponse) ProtoMessage()               {}
func (*DeleteWorkspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeleteWorkspaceResponse) GetRowsDeleted() int64 {
	if m != nil {
		return m.RowsDeleted
	}
	return 0
}

type SearchWorkspaceRequest struct {
	Query *service.Query `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
}

func (m *SearchWorkspaceRequest) Reset()                    { *m = SearchWorkspaceRequest{} }
func (m *SearchWorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchWorkspaceRequest) ProtoMessage()               {}
func (*SearchWorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SearchWorkspaceRequest) GetQuery() *service.Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type SearchWorkspaceResponse struct {
	Workspace *Workspace `protobuf:"bytes,1,opt,name=Workspace" json:"Workspace,omitempty"`
}

func (m *SearchWorkspaceResponse) Reset()                    { *m = SearchWorkspaceResponse{} }
func (m *SearchWorkspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchWorkspaceResponse) ProtoMessage()               {}
func (*SearchWorkspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *SearchWorkspaceResponse) GetWorkspace() *Workspace {
	if m != nil {
		return m.Workspace
	}
	return nil
}

type Workspace struct {
	UUID      string   `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
	Label     string   `protobuf:"bytes,2,opt,name=Label" json:"Label,omitempty"`
	Slug      string   `protobuf:"bytes,3,opt,name=Slug" json:"Slug,omitempty"`
	RootNodes []string `protobuf:"bytes,4,rep,name=RootNodes" json:"RootNodes,omitempty"`
}

func (m *Workspace) Reset()                    { *m = Workspace{} }
func (m *Workspace) String() string            { return proto.CompactTextString(m) }
func (*Workspace) ProtoMessage()               {}
func (*Workspace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Workspace) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Workspace) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Workspace) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Workspace) GetRootNodes() []string {
	if m != nil {
		return m.RootNodes
	}
	return nil
}

type WorkspaceSingleQuery struct {
	Uuid  string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Slug  string `protobuf:"bytes,3,opt,name=slug" json:"slug,omitempty"`
	Not   bool   `protobuf:"varint,4,opt,name=not" json:"not,omitempty"`
}

func (m *WorkspaceSingleQuery) Reset()                    { *m = WorkspaceSingleQuery{} }
func (m *WorkspaceSingleQuery) String() string            { return proto.CompactTextString(m) }
func (*WorkspaceSingleQuery) ProtoMessage()               {}
func (*WorkspaceSingleQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *WorkspaceSingleQuery) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *WorkspaceSingleQuery) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *WorkspaceSingleQuery) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *WorkspaceSingleQuery) GetNot() bool {
	if m != nil {
		return m.Not
	}
	return false
}

func init() {
	proto.RegisterType((*CreateRoleRequest)(nil), "idm.CreateRoleRequest")
	proto.RegisterType((*CreateRoleResponse)(nil), "idm.CreateRoleResponse")
	proto.RegisterType((*DeleteRoleRequest)(nil), "idm.DeleteRoleRequest")
	proto.RegisterType((*DeleteRoleResponse)(nil), "idm.DeleteRoleResponse")
	proto.RegisterType((*SearchRoleRequest)(nil), "idm.SearchRoleRequest")
	proto.RegisterType((*SearchRoleResponse)(nil), "idm.SearchRoleResponse")
	proto.RegisterType((*Role)(nil), "idm.Role")
	proto.RegisterType((*RoleSingleQuery)(nil), "idm.RoleSingleQuery")
	proto.RegisterType((*CreateUserRequest)(nil), "idm.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "idm.CreateUserResponse")
	proto.RegisterType((*BindUserRequest)(nil), "idm.BindUserRequest")
	proto.RegisterType((*BindUserResponse)(nil), "idm.BindUserResponse")
	proto.RegisterType((*DeleteUserRequest)(nil), "idm.DeleteUserRequest")
	proto.RegisterType((*DeleteUserResponse)(nil), "idm.DeleteUserResponse")
	proto.RegisterType((*SearchUserRequest)(nil), "idm.SearchUserRequest")
	proto.RegisterType((*SearchUserResponse)(nil), "idm.SearchUserResponse")
	proto.RegisterType((*User)(nil), "idm.User")
	proto.RegisterType((*UserSingleQuery)(nil), "idm.UserSingleQuery")
	proto.RegisterType((*CreateWorkspaceRequest)(nil), "idm.CreateWorkspaceRequest")
	proto.RegisterType((*CreateWorkspaceResponse)(nil), "idm.CreateWorkspaceResponse")
	proto.RegisterType((*DeleteWorkspaceRequest)(nil), "idm.DeleteWorkspaceRequest")
	proto.RegisterType((*DeleteWorkspaceResponse)(nil), "idm.DeleteWorkspaceResponse")
	proto.RegisterType((*SearchWorkspaceRequest)(nil), "idm.SearchWorkspaceRequest")
	proto.RegisterType((*SearchWorkspaceResponse)(nil), "idm.SearchWorkspaceResponse")
	proto.RegisterType((*Workspace)(nil), "idm.Workspace")
	proto.RegisterType((*WorkspaceSingleQuery)(nil), "idm.WorkspaceSingleQuery")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RoleService service

type RoleServiceClient interface {
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
	SearchRole(ctx context.Context, in *SearchRoleRequest, opts ...client.CallOption) (RoleService_SearchRoleClient, error)
	StreamRole(ctx context.Context, opts ...client.CallOption) (RoleService_StreamRoleClient, error)
}

type roleServiceClient struct {
	c           client.Client
	serviceName string
}

func NewRoleServiceClient(serviceName string, c client.Client) RoleServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "idm"
	}
	return &roleServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *roleServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.CreateRole", in)
	out := new(CreateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) SearchRole(ctx context.Context, in *SearchRoleRequest, opts ...client.CallOption) (RoleService_SearchRoleClient, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.SearchRole", &SearchRoleRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &roleServiceSearchRoleClient{stream}, nil
}

type RoleService_SearchRoleClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchRoleResponse, error)
}

type roleServiceSearchRoleClient struct {
	stream client.Streamer
}

func (x *roleServiceSearchRoleClient) Close() error {
	return x.stream.Close()
}

func (x *roleServiceSearchRoleClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceSearchRoleClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceSearchRoleClient) Recv() (*SearchRoleResponse, error) {
	m := new(SearchRoleResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roleServiceClient) StreamRole(ctx context.Context, opts ...client.CallOption) (RoleService_StreamRoleClient, error) {
	req := c.c.NewRequest(c.serviceName, "RoleService.StreamRole", &SearchRoleRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &roleServiceStreamRoleClient{stream}, nil
}

type RoleService_StreamRoleClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchRoleRequest) error
	Recv() (*SearchRoleResponse, error)
}

type roleServiceStreamRoleClient struct {
	stream client.Streamer
}

func (x *roleServiceStreamRoleClient) Close() error {
	return x.stream.Close()
}

func (x *roleServiceStreamRoleClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceStreamRoleClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceStreamRoleClient) Send(m *SearchRoleRequest) error {
	return x.stream.Send(m)
}

func (x *roleServiceStreamRoleClient) Recv() (*SearchRoleResponse, error) {
	m := new(SearchRoleResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	CreateRole(context.Context, *CreateRoleRequest, *CreateRoleResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
	SearchRole(context.Context, *SearchRoleRequest, RoleService_SearchRoleStream) error
	StreamRole(context.Context, RoleService_StreamRoleStream) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&RoleService{hdlr}, opts...))
}

type RoleService struct {
	RoleServiceHandler
}

func (h *RoleService) CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error {
	return h.RoleServiceHandler.CreateRole(ctx, in, out)
}

func (h *RoleService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.RoleServiceHandler.DeleteRole(ctx, in, out)
}

func (h *RoleService) SearchRole(ctx context.Context, stream server.Streamer) error {
	m := new(SearchRoleRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RoleServiceHandler.SearchRole(ctx, m, &roleServiceSearchRoleStream{stream})
}

type RoleService_SearchRoleStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchRoleResponse) error
}

type roleServiceSearchRoleStream struct {
	stream server.Streamer
}

func (x *roleServiceSearchRoleStream) Close() error {
	return x.stream.Close()
}

func (x *roleServiceSearchRoleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceSearchRoleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceSearchRoleStream) Send(m *SearchRoleResponse) error {
	return x.stream.Send(m)
}

func (h *RoleService) StreamRole(ctx context.Context, stream server.Streamer) error {
	return h.RoleServiceHandler.StreamRole(ctx, &roleServiceStreamRoleStream{stream})
}

type RoleService_StreamRoleStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchRoleResponse) error
	Recv() (*SearchRoleRequest, error)
}

type roleServiceStreamRoleStream struct {
	stream server.Streamer
}

func (x *roleServiceStreamRoleStream) Close() error {
	return x.stream.Close()
}

func (x *roleServiceStreamRoleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceStreamRoleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceStreamRoleStream) Send(m *SearchRoleResponse) error {
	return x.stream.Send(m)
}

func (x *roleServiceStreamRoleStream) Recv() (*SearchRoleRequest, error) {
	m := new(SearchRoleRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Client API for UserService service

type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	BindUser(ctx context.Context, in *BindUserRequest, opts ...client.CallOption) (*BindUserResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (UserService_SearchUserClient, error)
	StreamUser(ctx context.Context, opts ...client.CallOption) (UserService_StreamUserClient, error)
}

type userServiceClient struct {
	c           client.Client
	serviceName string
}

func NewUserServiceClient(serviceName string, c client.Client) UserServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "idm"
	}
	return &userServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BindUser(ctx context.Context, in *BindUserRequest, opts ...client.CallOption) (*BindUserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.BindUser", in)
	out := new(BindUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (UserService_SearchUserClient, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.SearchUser", &SearchUserRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userServiceSearchUserClient{stream}, nil
}

type UserService_SearchUserClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchUserResponse, error)
}

type userServiceSearchUserClient struct {
	stream client.Streamer
}

func (x *userServiceSearchUserClient) Close() error {
	return x.stream.Close()
}

func (x *userServiceSearchUserClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceSearchUserClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceSearchUserClient) Recv() (*SearchUserResponse, error) {
	m := new(SearchUserResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) StreamUser(ctx context.Context, opts ...client.CallOption) (UserService_StreamUserClient, error) {
	req := c.c.NewRequest(c.serviceName, "UserService.StreamUser", &SearchUserRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &userServiceStreamUserClient{stream}, nil
}

type UserService_StreamUserClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchUserRequest) error
	Recv() (*SearchUserResponse, error)
}

type userServiceStreamUserClient struct {
	stream client.Streamer
}

func (x *userServiceStreamUserClient) Close() error {
	return x.stream.Close()
}

func (x *userServiceStreamUserClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceStreamUserClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceStreamUserClient) Send(m *SearchUserRequest) error {
	return x.stream.Send(m)
}

func (x *userServiceStreamUserClient) Recv() (*SearchUserResponse, error) {
	m := new(SearchUserResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	BindUser(context.Context, *BindUserRequest, *BindUserResponse) error
	SearchUser(context.Context, *SearchUserRequest, UserService_SearchUserStream) error
	StreamUser(context.Context, UserService_StreamUserStream) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserService{hdlr}, opts...))
}

type UserService struct {
	UserServiceHandler
}

func (h *UserService) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *UserService) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *UserService) BindUser(ctx context.Context, in *BindUserRequest, out *BindUserResponse) error {
	return h.UserServiceHandler.BindUser(ctx, in, out)
}

func (h *UserService) SearchUser(ctx context.Context, stream server.Streamer) error {
	m := new(SearchUserRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserServiceHandler.SearchUser(ctx, m, &userServiceSearchUserStream{stream})
}

type UserService_SearchUserStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchUserResponse) error
}

type userServiceSearchUserStream struct {
	stream server.Streamer
}

func (x *userServiceSearchUserStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceSearchUserStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceSearchUserStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceSearchUserStream) Send(m *SearchUserResponse) error {
	return x.stream.Send(m)
}

func (h *UserService) StreamUser(ctx context.Context, stream server.Streamer) error {
	return h.UserServiceHandler.StreamUser(ctx, &userServiceStreamUserStream{stream})
}

type UserService_StreamUserStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchUserResponse) error
	Recv() (*SearchUserRequest, error)
}

type userServiceStreamUserStream struct {
	stream server.Streamer
}

func (x *userServiceStreamUserStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceStreamUserStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceStreamUserStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceStreamUserStream) Send(m *SearchUserResponse) error {
	return x.stream.Send(m)
}

func (x *userServiceStreamUserStream) Recv() (*SearchUserRequest, error) {
	m := new(SearchUserRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Client API for WorkspaceService service

type WorkspaceServiceClient interface {
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...client.CallOption) (*CreateWorkspaceResponse, error)
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...client.CallOption) (*DeleteWorkspaceResponse, error)
	SearchWorkspace(ctx context.Context, in *SearchWorkspaceRequest, opts ...client.CallOption) (WorkspaceService_SearchWorkspaceClient, error)
	StreamWorkspace(ctx context.Context, opts ...client.CallOption) (WorkspaceService_StreamWorkspaceClient, error)
}

type workspaceServiceClient struct {
	c           client.Client
	serviceName string
}

func NewWorkspaceServiceClient(serviceName string, c client.Client) WorkspaceServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "idm"
	}
	return &workspaceServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *workspaceServiceClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...client.CallOption) (*CreateWorkspaceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "WorkspaceService.CreateWorkspace", in)
	out := new(CreateWorkspaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...client.CallOption) (*DeleteWorkspaceResponse, error) {
	req := c.c.NewRequest(c.serviceName, "WorkspaceService.DeleteWorkspace", in)
	out := new(DeleteWorkspaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceServiceClient) SearchWorkspace(ctx context.Context, in *SearchWorkspaceRequest, opts ...client.CallOption) (WorkspaceService_SearchWorkspaceClient, error) {
	req := c.c.NewRequest(c.serviceName, "WorkspaceService.SearchWorkspace", &SearchWorkspaceRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &workspaceServiceSearchWorkspaceClient{stream}, nil
}

type WorkspaceService_SearchWorkspaceClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchWorkspaceResponse, error)
}

type workspaceServiceSearchWorkspaceClient struct {
	stream client.Streamer
}

func (x *workspaceServiceSearchWorkspaceClient) Close() error {
	return x.stream.Close()
}

func (x *workspaceServiceSearchWorkspaceClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceSearchWorkspaceClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workspaceServiceSearchWorkspaceClient) Recv() (*SearchWorkspaceResponse, error) {
	m := new(SearchWorkspaceResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceServiceClient) StreamWorkspace(ctx context.Context, opts ...client.CallOption) (WorkspaceService_StreamWorkspaceClient, error) {
	req := c.c.NewRequest(c.serviceName, "WorkspaceService.StreamWorkspace", &SearchWorkspaceRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &workspaceServiceStreamWorkspaceClient{stream}, nil
}

type WorkspaceService_StreamWorkspaceClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchWorkspaceRequest) error
	Recv() (*SearchWorkspaceResponse, error)
}

type workspaceServiceStreamWorkspaceClient struct {
	stream client.Streamer
}

func (x *workspaceServiceStreamWorkspaceClient) Close() error {
	return x.stream.Close()
}

func (x *workspaceServiceStreamWorkspaceClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceStreamWorkspaceClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workspaceServiceStreamWorkspaceClient) Send(m *SearchWorkspaceRequest) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceStreamWorkspaceClient) Recv() (*SearchWorkspaceResponse, error) {
	m := new(SearchWorkspaceResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for WorkspaceService service

type WorkspaceServiceHandler interface {
	CreateWorkspace(context.Context, *CreateWorkspaceRequest, *CreateWorkspaceResponse) error
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest, *DeleteWorkspaceResponse) error
	SearchWorkspace(context.Context, *SearchWorkspaceRequest, WorkspaceService_SearchWorkspaceStream) error
	StreamWorkspace(context.Context, WorkspaceService_StreamWorkspaceStream) error
}

func RegisterWorkspaceServiceHandler(s server.Server, hdlr WorkspaceServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&WorkspaceService{hdlr}, opts...))
}

type WorkspaceService struct {
	WorkspaceServiceHandler
}

func (h *WorkspaceService) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, out *CreateWorkspaceResponse) error {
	return h.WorkspaceServiceHandler.CreateWorkspace(ctx, in, out)
}

func (h *WorkspaceService) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, out *DeleteWorkspaceResponse) error {
	return h.WorkspaceServiceHandler.DeleteWorkspace(ctx, in, out)
}

func (h *WorkspaceService) SearchWorkspace(ctx context.Context, stream server.Streamer) error {
	m := new(SearchWorkspaceRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.WorkspaceServiceHandler.SearchWorkspace(ctx, m, &workspaceServiceSearchWorkspaceStream{stream})
}

type WorkspaceService_SearchWorkspaceStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchWorkspaceResponse) error
}

type workspaceServiceSearchWorkspaceStream struct {
	stream server.Streamer
}

func (x *workspaceServiceSearchWorkspaceStream) Close() error {
	return x.stream.Close()
}

func (x *workspaceServiceSearchWorkspaceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceSearchWorkspaceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workspaceServiceSearchWorkspaceStream) Send(m *SearchWorkspaceResponse) error {
	return x.stream.Send(m)
}

func (h *WorkspaceService) StreamWorkspace(ctx context.Context, stream server.Streamer) error {
	return h.WorkspaceServiceHandler.StreamWorkspace(ctx, &workspaceServiceStreamWorkspaceStream{stream})
}

type WorkspaceService_StreamWorkspaceStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchWorkspaceResponse) error
	Recv() (*SearchWorkspaceRequest, error)
}

type workspaceServiceStreamWorkspaceStream struct {
	stream server.Streamer
}

func (x *workspaceServiceStreamWorkspaceStream) Close() error {
	return x.stream.Close()
}

func (x *workspaceServiceStreamWorkspaceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceStreamWorkspaceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workspaceServiceStreamWorkspaceStream) Send(m *SearchWorkspaceResponse) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceStreamWorkspaceStream) Recv() (*SearchWorkspaceRequest, error) {
	m := new(SearchWorkspaceRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func init() { proto.RegisterFile("idm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x6f, 0xda, 0x48,
	0x14, 0xc6, 0x5c, 0x56, 0xe1, 0x20, 0xc5, 0xc9, 0x88, 0x05, 0x96, 0xcd, 0x4a, 0xc8, 0xca, 0x03,
	0x5a, 0xad, 0x20, 0x4b, 0xa4, 0xdd, 0xcd, 0x46, 0x9b, 0x55, 0x1a, 0xda, 0x28, 0x52, 0x85, 0x52,
	0xa3, 0xa8, 0xcf, 0x06, 0x4f, 0x89, 0x15, 0xe3, 0xa1, 0xbe, 0x24, 0xe2, 0x97, 0xf4, 0x7f, 0xf5,
	0xa9, 0x8f, 0xfd, 0x19, 0x7d, 0xac, 0xe6, 0xe2, 0x99, 0xc1, 0x4e, 0x52, 0xa0, 0x7d, 0x9b, 0x39,
	0x97, 0xef, 0xcc, 0xf9, 0x7c, 0x2e, 0x86, 0xaa, 0xe7, 0xce, 0x7b, 0x8b, 0x90, 0xc4, 0x04, 0x95,
	0x3c, 0x77, 0xde, 0x3e, 0x9d, 0x79, 0xf1, 0x6d, 0x32, 0xe9, 0x4d, 0xc9, 0xbc, 0xbf, 0x58, 0xba,
	0x1e, 0xe9, 0x47, 0x38, 0xbc, 0xf7, 0xa6, 0x38, 0xea, 0x4f, 0xc9, 0x7c, 0x4e, 0x82, 0xf4, 0xde,
	0x67, 0x4e, 0x42, 0xc8, 0x11, 0xac, 0x01, 0xec, 0x5f, 0x84, 0xd8, 0x89, 0xb1, 0x4d, 0x7c, 0x6c,
	0xe3, 0xf7, 0x09, 0x8e, 0x62, 0xf4, 0x1b, 0x94, 0xe9, 0xb5, 0x65, 0x74, 0x8c, 0x6e, 0x6d, 0x50,
	0xed, 0xd1, 0x80, 0x4c, 0xcf, 0xc4, 0xd6, 0x31, 0x20, 0xdd, 0x27, 0x5a, 0x90, 0x20, 0xc2, 0xdf,
	0x72, 0x3a, 0x81, 0xfd, 0x21, 0xf6, 0xf1, 0x6a, 0xa0, 0x43, 0xa8, 0xbc, 0x49, 0x70, 0xb8, 0x14,
	0x4e, 0xbb, 0x3d, 0xf1, 0xd2, 0x1e, 0x93, 0xda, 0x5c, 0x69, 0xfd, 0x05, 0x48, 0x77, 0x15, 0xf1,
	0x3a, 0x50, 0xb3, 0xc9, 0x43, 0xc4, 0x35, 0x2e, 0x43, 0x28, 0xd9, 0xba, 0x88, 0x86, 0x1c, 0x63,
	0x27, 0x9c, 0xde, 0x6e, 0x1e, 0xf2, 0x18, 0x90, 0xee, 0xba, 0x5e, 0x8a, 0xbf, 0x73, 0x35, 0xda,
	0x85, 0xe2, 0xd5, 0x90, 0x19, 0x55, 0xed, 0xe2, 0xd5, 0x10, 0x21, 0x28, 0x8f, 0x9c, 0x39, 0x6e,
	0x15, 0x99, 0x84, 0x9d, 0xad, 0xbf, 0xc1, 0xa4, 0xb6, 0x63, 0x2f, 0x98, 0xf9, 0x98, 0xc5, 0xa4,
	0x66, 0x01, 0x35, 0x33, 0x3a, 0x25, 0x6a, 0x46, 0xcf, 0x68, 0x0f, 0x4a, 0x01, 0x89, 0x5b, 0xa5,
	0x8e, 0xd1, 0xdd, 0xb1, 0xe9, 0x51, 0x7d, 0xb0, 0x9b, 0x08, 0x87, 0xda, 0x07, 0xa3, 0xd7, 0x95,
	0x87, 0x31, 0x3d, 0x13, 0xab, 0x0f, 0xc6, 0x7d, 0x54, 0x36, 0xcf, 0x39, 0x5d, 0x81, 0xf9, 0xc2,
	0x0b, 0x5c, 0x3d, 0x4c, 0x1b, 0x76, 0x92, 0x08, 0x87, 0x23, 0xfe, 0x4a, 0x9a, 0x8c, 0xbc, 0x53,
	0xdd, 0xc2, 0x89, 0xa2, 0x07, 0x12, 0xba, 0x22, 0x51, 0x79, 0xb7, 0xfe, 0x84, 0x3d, 0x05, 0xb5,
	0x5e, 0x74, 0x59, 0x2e, 0x7a, 0xfc, 0x0d, 0xcb, 0x65, 0x25, 0xde, 0x06, 0xe5, 0xb2, 0x79, 0x48,
	0x59, 0x2e, 0x9b, 0xa4, 0xf8, 0xd9, 0xe0, 0xfa, 0x5c, 0xbd, 0xd4, 0xa1, 0xf2, 0x9a, 0xcc, 0xbc,
	0x40, 0xf0, 0xc8, 0x2f, 0x94, 0xe0, 0xeb, 0x94, 0xe0, 0x12, 0x27, 0x38, 0xbd, 0xa3, 0x03, 0xa8,
	0x5e, 0x86, 0x24, 0x59, 0x5c, 0x3b, 0xf1, 0x6d, 0xab, 0xcc, 0x94, 0x4a, 0x80, 0x4e, 0x00, 0xce,
	0xe3, 0x38, 0xf4, 0x26, 0x49, 0x8c, 0xa3, 0x56, 0xa5, 0x53, 0xea, 0xd6, 0x06, 0xbf, 0xc8, 0xd7,
	0xf4, 0x94, 0xee, 0x65, 0x10, 0x87, 0x4b, 0x5b, 0x33, 0x6e, 0xff, 0x07, 0x66, 0x46, 0x4d, 0x4b,
	0xf2, 0x0e, 0x2f, 0xc5, 0x73, 0xe9, 0x91, 0xbe, 0xf7, 0xde, 0xf1, 0x93, 0xb4, 0xc0, 0xf9, 0xe5,
	0xdf, 0xe2, 0x3f, 0x86, 0xf5, 0xc5, 0x00, 0x93, 0xc6, 0xd0, 0xcb, 0xbc, 0x0e, 0x15, 0x9f, 0x65,
	0xc7, 0x11, 0xf8, 0xe5, 0xb9, 0xf2, 0xa1, 0xd9, 0xcd, 0x64, 0x76, 0x3c, 0x75, 0x25, 0x40, 0x43,
	0x00, 0x47, 0x65, 0x57, 0x66, 0xd9, 0x1d, 0xca, 0xec, 0xb4, 0xc8, 0xf9, 0x44, 0x95, 0x5f, 0xda,
	0x68, 0x15, 0xd9, 0x68, 0xdf, 0x9b, 0xfa, 0x2b, 0x68, 0xf0, 0x9e, 0x7b, 0x4b, 0xc2, 0xbb, 0x68,
	0xe1, 0x4c, 0xe5, 0x04, 0xfa, 0x03, 0xaa, 0x52, 0x26, 0xcb, 0x8a, 0xbe, 0x57, 0x59, 0x2a, 0x03,
	0xeb, 0x12, 0x9a, 0x39, 0x1c, 0x51, 0x5f, 0x9b, 0x01, 0x9d, 0x41, 0x83, 0x57, 0x7a, 0xee, 0x41,
	0xeb, 0xd5, 0xf8, 0x29, 0x34, 0x73, 0xfe, 0x6b, 0xf7, 0xd6, 0x19, 0x34, 0x78, 0x83, 0x6c, 0x19,
	0xfc, 0x12, 0x9a, 0x39, 0xff, 0xad, 0x58, 0x98, 0x69, 0xd6, 0x74, 0xe2, 0xde, 0xdc, 0xc8, 0xd6,
	0x63, 0x67, 0xd6, 0x7c, 0xce, 0x04, 0xfb, 0xb2, 0xf9, 0xe8, 0x85, 0x5a, 0x8e, 0xfd, 0x64, 0x26,
	0xaa, 0x8f, 0x9d, 0x69, 0x59, 0xda, 0x84, 0xc4, 0x23, 0xe2, 0x8a, 0xba, 0xab, 0xda, 0x4a, 0x60,
	0xbd, 0x83, 0xba, 0x0c, 0x94, 0x99, 0xf2, 0x49, 0xe2, 0xb9, 0x69, 0x4c, 0x7a, 0x66, 0x2d, 0xa1,
	0xc7, 0xf4, 0xd3, 0x98, 0x91, 0x16, 0x93, 0x9e, 0xd3, 0x32, 0x2d, 0xcb, 0x32, 0x1d, 0x7c, 0x28,
	0x52, 0xf2, 0x7d, 0x3c, 0xe6, 0xb4, 0xa1, 0xff, 0x01, 0xd4, 0x72, 0x46, 0x0d, 0xc6, 0x44, 0x6e,
	0xc3, 0xb7, 0x9b, 0x39, 0x39, 0x67, 0xd3, 0x2a, 0x50, 0x00, 0xb5, 0x6d, 0x05, 0x40, 0x6e, 0x73,
	0x0b, 0x80, 0xfc, 0x5a, 0xb6, 0x0a, 0xe8, 0x1c, 0x40, 0xed, 0x4e, 0x01, 0x90, 0xdb, 0xc3, 0x02,
	0x20, 0xbf, 0x64, 0xad, 0xc2, 0x91, 0x81, 0x2e, 0x00, 0xc6, 0x71, 0x88, 0x9d, 0xf9, 0x96, 0x10,
	0x5d, 0xe3, 0xc8, 0x18, 0x7c, 0x2c, 0x42, 0x8d, 0x8d, 0x80, 0x2c, 0x33, 0x6c, 0xe8, 0xea, 0xcc,
	0x68, 0x03, 0x7f, 0x85, 0x19, 0x7d, 0x9a, 0xeb, 0xcc, 0x68, 0x00, 0xb9, 0x25, 0xb5, 0xc2, 0x4c,
	0x06, 0xe0, 0x04, 0x76, 0xd2, 0x3d, 0x88, 0xea, 0xcc, 0x2c, 0xb3, 0x61, 0xdb, 0x3f, 0x67, 0xa4,
	0x79, 0x52, 0xb5, 0xd8, 0xb9, 0x6d, 0xb5, 0xc2, 0xc8, 0x2a, 0x80, 0x4e, 0xea, 0x96, 0x10, 0x8c,
	0xd4, 0x4f, 0x45, 0xd8, 0x53, 0x75, 0x2d, 0x98, 0x1d, 0x81, 0x99, 0x99, 0x51, 0xe8, 0x57, 0x8d,
	0xc6, 0x6c, 0xcf, 0xb7, 0x0f, 0x1e, 0x57, 0xca, 0x64, 0x47, 0x60, 0x66, 0x46, 0x8d, 0xc0, 0x7b,
	0x7c, 0x80, 0x09, 0xbc, 0x27, 0xa6, 0x93, 0x55, 0x40, 0xd7, 0x60, 0x66, 0xa6, 0x87, 0xc0, 0x7b,
	0x7c, 0x26, 0x09, 0xbc, 0x27, 0x06, 0x0e, 0xe3, 0xd2, 0x06, 0x93, 0x73, 0xf9, 0x63, 0x10, 0x29,
	0xb5, 0x93, 0x9f, 0xd8, 0x1f, 0xf9, 0xf1, 0xd7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x1a, 0xb3,
	0x40, 0xe0, 0x0b, 0x00, 0x00,
}
