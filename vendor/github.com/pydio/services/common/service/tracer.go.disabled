package templates

import (
	"io"
	"github.com/pydio/services/common/log"
	"time"

	micro "github.com/micro/go-micro"
	otwrapper "github.com/micro/go-plugins/wrapper/trace/opentracing"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/uber/jaeger-client-go/config"
)

type errorOnlyLogger struct{}

// Use default log for Errors
func (l *errorOnlyLogger) Error(msg string) {
	log.Printf("TRACER ERROR: %s", msg)
}

// Infof logs a message at info priority
// Skip this message to avoid spamming "Reporting Span" logs
func (l *errorOnlyLogger) Infof(msg string, args ...interface{}) {

}

func newTracer(name string, options *[]micro.Option) io.Closer {
	cfg := config.Configuration{
		Sampler: &config.SamplerConfig{
			Type:  "const",
			Param: 1,
		},
		Reporter: &config.ReporterConfig{
			LogSpans:            true,
			BufferFlushInterval: 1 * time.Second,
		},
	}
	tracer, closer, _ := cfg.New(
		name,
		config.Logger(&errorOnlyLogger{}),
	)
	opentracing.SetGlobalTracer(tracer)

	newOptions := *options
	newOptions = append(newOptions, micro.WrapClient(otwrapper.NewClientWrapper(tracer)))
	newOptions = append(newOptions, micro.WrapHandler(otwrapper.NewHandlerWrapper(tracer)))
	*options = newOptions

	return closer
}
